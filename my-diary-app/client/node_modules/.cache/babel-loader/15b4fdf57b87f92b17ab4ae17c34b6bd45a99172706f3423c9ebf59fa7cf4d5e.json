{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main-page\"\n};\nconst _hoisted_2 = {\n  class: \"user-info\"\n};\nconst _hoisted_3 = {\n  class: \"main-container\"\n};\nconst _hoisted_4 = {\n  class: \"diary-section\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = {\n  key: 0,\n  class: \"diary-content\"\n};\nconst _hoisted_7 = [\"innerHTML\"];\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_10 = {\n  key: 1,\n  class: \"empty-diary\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"recent-diaries\"\n};\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"RECENT\", -1 /* HOISTED */);\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */);\nconst _hoisted_15 = {\n  class: \"diary-list\"\n};\nconst _hoisted_16 = [\"onClick\"];\nexport function render(_ctx, _cache) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 사용자 정보, 마이페이지 및 로그아웃 링크 \"), _createElementVNode(\"div\", _hoisted_2, [_createTextVNode(_toDisplayString(_ctx.userName) + \"님 | \", 1 /* TEXT */), _createVNode(_component_router_link, {\n    to: \"/mypage\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"마이페이지\")]),\n    _: 1 /* STABLE */\n  }), _createTextVNode(\" | \"), _createElementVNode(\"a\", {\n    href: \"#\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.logout && _ctx.logout(...args))\n  }, \"로그아웃\")]), _createCommentVNode(\" 메인 컨테이너 \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 날짜 선택 \"), _createTextVNode(\" 일자 : \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedDate = $event),\n    onChange: _cache[2] || (_cache[2] = (...args) => _ctx.fetchDiary && _ctx.fetchDiary(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, _ctx.selectedDate]]), _hoisted_5, _createCommentVNode(\" 일기장 표시 \"), _ctx.diaryContent ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", {\n    innerHTML: _ctx.formattedDiaryContent\n  }, null, 8 /* PROPS */, _hoisted_7), _hoisted_8, _hoisted_9, _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.editDiary && _ctx.editDiary(...args))\n  }, \"수정\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.newDiaryContent = $event),\n    cols: \"50\",\n    rows: \"20\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.newDiaryContent]]), _hoisted_11, _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.saveDiary && _ctx.saveDiary(...args))\n  }, \"저장\")]))]), _createCommentVNode(\" 최근 작성한 일기 섹션 \"), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _hoisted_14, _createElementVNode(\"div\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.recentDiaryDates, date => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: date,\n      class: _normalizeClass([\"diary-date\", {\n        'diary-date-selected': _ctx.isDateSelected(date)\n      }]),\n      onClick: $event => _ctx.selectDiaryDate(date)\n    }, _toDisplayString(_ctx.formatDate(date)), 11 /* TEXT, CLASS, PROPS */, _hoisted_16);\n  }), 128 /* KEYED_FRAGMENT */))])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_createTextVNode","_toDisplayString","_ctx","userName","_createVNode","_component_router_link","to","default","_withCtx","_","href","onClick","_cache","args","logout","_hoisted_3","_hoisted_4","type","$event","selectedDate","onChange","fetchDiary","_hoisted_5","diaryContent","_hoisted_6","innerHTML","formattedDiaryContent","_hoisted_7","_hoisted_8","_hoisted_9","editDiary","_hoisted_10","newDiaryContent","cols","rows","_hoisted_11","saveDiary","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_Fragment","_renderList","recentDiaryDates","date","_normalizeClass","isDateSelected","selectDiaryDate","formatDate","_hoisted_16"],"sources":["/Users/ewoo2/Library/CloudStorage/OneDrive-개인/문서/GitHub/공개SW프로젝트-Mac/Internet_Programming/my-diary-app/client/src/components/MainPage.vue"],"sourcesContent":["<template>\n  <div class=\"main-page\">\n    <!-- 사용자 정보, 마이페이지 및 로그아웃 링크 -->\n    <div class=\"user-info\">\n      {{ userName }}님 | \n      <router-link to=\"/mypage\">마이페이지</router-link> |\n      <a href=\"#\" @click=\"logout\">로그아웃</a>\n    </div>\n\n    <!-- 메인 컨테이너 -->\n    <div class=\"main-container\">\n      <div class=\"diary-section\">\n        <!-- 날짜 선택 -->\n        일자 : <input type=\"date\" v-model=\"selectedDate\" @change=\"fetchDiary\">\n        <hr>\n        <!-- 일기장 표시 -->\n        <div v-if=\"diaryContent\" class=\"diary-content\">\n          <div v-html=\"formattedDiaryContent\"></div>\n          <br><br>\n          <button @click=\"editDiary\">수정</button>\n        </div>\n        <div v-else class=\"empty-diary\">\n          <textarea v-model=\"newDiaryContent\" cols=\"50\" rows=\"20\"></textarea>\n          <br>\n          <button @click=\"saveDiary\">저장</button>\n        </div>\n      </div>\n\n      <!-- 최근 작성한 일기 섹션 -->\n      <div class=\"recent-diaries\">\n        <h3>RECENT</h3>\n        <hr>\n        <div class=\"diary-list\">\n          <div v-for=\"date in recentDiaryDates\" :key=\"date\" class=\"diary-date\" :class=\"{ 'diary-date-selected': isDateSelected(date) }\" @click=\"selectDiaryDate(date)\">\n            {{ formatDate(date) }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n  \n<script>\nimport axios from 'axios';\nimport moment from 'moment';\n\nexport default {\n  data() {\n    return {\n      userName: '익명',\n      selectedDate: this.getCurrentDateInKST(),\n      diaryContent: null,\n      newDiaryContent: '',\n      recentDiaryDates: [], // 최근 작성한 일기 날짜 배열\n    };\n  },\n  computed: {\n    formattedDiaryContent() {\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\n    }\n  },\n  methods: {\n    getCurrentDateInKST() {\n      const now = new Date();\n      const utc = now.getTime() + (now.getTimezoneOffset() * 60000); // UTC 시간\n      const kstTime = new Date(utc + (3600000 * 9)); // UTC+9\n      return kstTime.toISOString().split('T')[0];\n    },\n\n    logout() {\n      // 로컬 스토리지에서 사용자 ID 삭제\n      localStorage.removeItem('userId');\n      // 로그인 페이지로 리디렉션\n      this.$router.push('/userlogin');\n    },\n\n    handleDateSelect(date) {\n      // 날짜를 선택하면 해당 날짜로 설정\n      this.selectedDate = date;\n      // 일기장 날짜를 선택한 날짜로 갱신\n      this.fetchDiary();\n    },\n\n    editDiary() {\n      // 수정 모드 활성화\n      this.newDiaryContent = this.diaryContent;\n      this.diaryContent = null;\n    },\n\n    fetchUserName() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/username`, {\n          params: {\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\n          }\n      })\n      .then(response => {\n          this.userName = response.data.name; // 사용자 이름 설정\n      })\n      .catch(error => {\n          console.error('Error fetching user name:', error);\n      });\n    },\n\n    fetchDiary() {\n      // 날짜 변경 시 기존 일기 내용 초기화\n      this.diaryContent = null;\n      this.newDiaryContent = '';\n\n      const userId = localStorage.getItem('userId');\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n        params: { userId }\n      })\n      .then(response => {\n        // 해당 날짜의 일기 내용이 존재하는 경우\n        this.diaryContent = response.data.content;\n      })\n      .catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 해당 날짜에 일기가 없는 경우\n          this.diaryContent = null;\n        } else {\n          console.error('Error fetching diary:', error);\n        }\n      });\n    },\n\n    saveDiary() {\n      const userId = localStorage.getItem('userId');\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/savediary`, {\n        user_id: userId,\n        date: this.selectedDate,\n        content: this.newDiaryContent\n      })\n      .then(() => {\n        this.diaryContent = this.newDiaryContent;\n        this.newDiaryContent = '';\n        alert('일기가 저장되었습니다.');\n        this.fetchRecentDiaries();\n      })\n      .catch(error => {\n        console.error('Error saving diary:', error);\n      });\n    },\n\n    deleteDiary() {\n  if (confirm('일기를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {\n    axios.delete(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n      params: { userId: localStorage.getItem('userId') }\n    })\n    .then(() => {\n      alert('일기가 삭제되었습니다.');\n      this.diaryContent = null; // 일기 내용 초기화\n      this.fetchRecentDiaries(); // 최근 일기 날짜 목록 갱신\n    })\n    .catch(error => {\n      console.error('Error deleting diary:', error);\n      alert('일기 삭제에 실패했습니다.');\n    });\n  }\n}\n\n    // 최근 작성된 일기 날짜 가져오기\n    fetchRecentDiaries() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/recent-diaries`, {\n        params: { userId: localStorage.getItem('userId') }\n      })\n      .then(response => {\n        this.recentDiaryDates = response.data.dates; // 서버에서 반환된 날짜 배열\n      })\n      .catch(error => {\n        console.error('Error fetching recent diaries:', error);\n      });\n    },\n\n    formatDate(date) {\n      return moment(date).format('YYYY-MM-DD');\n    },\n\n    selectDiaryDate(date) {\n      // 날짜 형식 변환\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      this.selectedDate = formattedDate;\n      this.fetchDiary();\n    },\n\n    isDateSelected(date) {\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      return formattedDate === this.selectedDate;\n    },\n  },\n\n  created() {\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\n    this.fetchRecentDiaries(); // 컴포넌트 생성 시 최근 일기 날짜 조회\n    axios.get(`${process.env.VUE_APP_BACKEND_URL}/current-kst-date`)\n    .then(response => {\n      this.selectedDate = response.data.date;\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    })\n    .catch(error => {\n      console.error('Error fetching current KST date:', error);\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    });\n\n    // 로컬 스토리지에서 사용자 ID 확인\n    const userId = localStorage.getItem('userId');\n\n    // 사용자 ID가 없으면 로그인 페이지로 리디렉션\n    if (!userId) {\n      alert(\"비정상적인 접근입니다.\");\n      this.$router.push('/userlogin');\n    }\n  }\n};\n</script>\n  \n<style>\n  .main-page {\n    padding: 20px;\n    max-width: 600px; /* 메인 페이지 최대 너비 조정 */\n    margin: auto;\n  }\n\n  .main-container {\n    display: flex; /* Flexbox 레이아웃 사용 */\n    margin-top: 50px;\n    padding: 20px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  }\n\n  .diary-section {\n    flex: 80%; /* 메인 컨테이너 좌측 85% 너비 할당 */\n  }\n\n  .empty-diary {\n    width: 100%;\n    box-sizing: border-box;\n    padding: 10px;\n  }\n\n  .recent-diaries {\n    flex: 20%; /* 메인 컨테이너 우측 15% 너비 할당 */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border-left: 1px solid #ddd;\n    height: 380px;\n    overflow-y: auto; /* 내용이 넘칠 경우 스크롤 */\n  }\n\n  .recent-diaries h3 {\n    margin-top: 0px;\n    margin-bottom: 1px;\n  }\n\n  .recent-diaries hr {\n    width: 100%;\n    border-top: 1px solid gray;\n  }\n\n  .diary-date {\n    cursor: pointer;\n    text-align: center;\n    padding: 5px;\n    border: 1px solid #eee;\n    margin-bottom: 5px;\n    word-break: break-all;\n    width: auto;\n    background-color: rgb(198, 229, 240);\n    font-size: 13px;\n  }\n\n  .diary-date-selected {\n    background-color: rgb(101, 185, 219);\n  }\n\n  .diary-date:hover {\n    background-color: rgb(101, 185, 219);\n  }\n\n  /* 모바일 화면용 스타일 */\n  @media (max-width: 600px) {\n    .main-container {\n      flex-direction: column;\n    }\n\n    .diary-section, .recent-diaries {\n      width: 100%;\n      flex: none;\n      padding-left: 0;\n      padding-right: 0;\n    }\n\n    .empty-diary textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 10px;\n    }\n\n    .recent-diaries {\n      margin-top: 20px;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      border: 1px solid;\n    }\n\n    .recent-diaries h3 {\n      margin-top: 10px;\n      margin-bottom: 0px;\n    }\n\n    .recent-diaries hr {\n      width: 100%;\n      border-top: 1px solid gray;\n    }\n  }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}