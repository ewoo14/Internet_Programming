{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  data() {\n    return {\n      userName: '익명',\n      selectedDate: this.getCurrentDateInKST(),\n      diaryContent: null,\n      newDiaryContent: '',\n      recentDiaryDates: [],\n      // 최근 작성한 일기 날짜 배열\n      remainingTime: 600,\n      // 초단위 (10분)\n      timer: null\n    };\n  },\n  computed: {\n    formattedDiaryContent() {\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\n    }\n  },\n  methods: {\n    getCurrentDateInKST() {\n      const now = new Date();\n      const utc = now.getTime() + now.getTimezoneOffset() * 60000; // UTC 시간\n      const kstTime = new Date(utc + 3600000 * 9); // UTC+9\n      return kstTime.toISOString().split('T')[0];\n    },\n    resetTimer() {\n      this.remainingTime = 600; // 타이머를 10분으로 재설정\n    },\n    updateTimer() {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n      } else {\n        this.logout(); // 타이머가 0이 되면 로그아웃 실행\n      }\n    },\n    logout() {\n      clearInterval(this.timerId); // 타이머 초기화\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, {\n          userId\n        }).then(() => {\n          localStorage.removeItem('userId');\n          this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\n        }).catch(error => {\n          console.error('로그아웃 실패:', error);\n        });\n      }\n    },\n    handleBeforeUnload() {\n      this.logout();\n    },\n    handleDateSelect(date) {\n      // 날짜를 선택하면 해당 날짜로 설정\n      this.selectedDate = date;\n      // 일기장 날짜를 선택한 날짜로 갱신\n      this.fetchDiary();\n    },\n    editDiary() {\n      // 수정 모드 활성화\n      this.newDiaryContent = this.diaryContent;\n      this.diaryContent = null;\n    },\n    fetchUserName() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/username`, {\n        params: {\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\n        }\n      }).then(response => {\n        this.userName = response.data.name; // 사용자 이름 설정\n      }).catch(error => {\n        console.error('Error fetching user name:', error);\n      });\n    },\n    fetchDiary() {\n      // 날짜 변경 시 기존 일기 내용 초기화\n      this.diaryContent = null;\n      this.newDiaryContent = '';\n      const userId = localStorage.getItem('userId');\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n        params: {\n          userId\n        }\n      }).then(response => {\n        // 해당 날짜의 일기 내용이 존재하는 경우\n        this.diaryContent = response.data.content;\n      }).catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 해당 날짜에 일기가 없는 경우\n          this.diaryContent = null;\n        } else {\n          console.error('Error fetching diary:', error);\n        }\n      });\n    },\n    saveDiary() {\n      const userId = localStorage.getItem('userId');\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/savediary`, {\n        user_id: userId,\n        date: this.selectedDate,\n        content: this.newDiaryContent\n      }).then(() => {\n        this.diaryContent = this.newDiaryContent;\n        this.newDiaryContent = '';\n        alert('일기가 저장되었습니다.');\n        this.fetchRecentDiaries();\n      }).catch(error => {\n        console.error('Error saving diary:', error);\n      });\n    },\n    deleteDiary() {\n      if (confirm('일기를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {\n        axios.delete(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n          params: {\n            userId: localStorage.getItem('userId')\n          }\n        }).then(() => {\n          alert('일기가 삭제되었습니다.');\n          this.diaryContent = null; // 일기 내용 초기화\n          this.fetchRecentDiaries(); // 최근 일기 날짜 목록 갱신\n        }).catch(error => {\n          console.error('Error deleting diary:', error);\n          alert('일기 삭제에 실패했습니다.');\n        });\n      }\n    },\n    // 최근 작성된 일기 날짜 가져오기\n    fetchRecentDiaries() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/recent-diaries`, {\n        params: {\n          userId: localStorage.getItem('userId')\n        }\n      }).then(response => {\n        this.recentDiaryDates = response.data.dates; // 서버에서 반환된 날짜 배열\n      }).catch(error => {\n        console.error('Error fetching recent diaries:', error);\n      });\n    },\n    formatDate(date) {\n      return moment(date).format('YYYY-MM-DD');\n    },\n    selectDiaryDate(date) {\n      // 날짜 형식 변환\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      this.selectedDate = formattedDate;\n      this.fetchDiary();\n    },\n    isDateSelected(date) {\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      return formattedDate === this.selectedDate;\n    }\n  },\n  created() {\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\n    this.fetchRecentDiaries(); // 컴포넌트 생성 시 최근 일기 날짜 조회\n    axios.get(`${process.env.VUE_APP_BACKEND_URL}/current-kst-date`).then(response => {\n      this.selectedDate = response.data.date;\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    }).catch(error => {\n      console.error('Error fetching current KST date:', error);\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    });\n\n    // 로컬 스토리지에서 사용자 ID 확인\n    const userId = localStorage.getItem('userId');\n\n    // 사용자 ID가 없으면 로그인 페이지로 리디렉션\n    if (!userId) {\n      alert(\"비정상적인 접근입니다.\");\n      this.$router.push('/userlogin');\n    }\n  },\n  mounted() {\n    this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\n\n    // 사용자 활동 감지\n    window.addEventListener('mousemove', this.resetTimer);\n    window.addEventListener('keydown', this.resetTimer);\n  },\n  beforeUnmount() {\n    clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\n    window.removeEventListener('mousemove', this.resetTimer);\n    window.removeEventListener('keydown', this.resetTimer);\n  }\n};","map":{"version":3,"names":["axios","moment","data","userName","selectedDate","getCurrentDateInKST","diaryContent","newDiaryContent","recentDiaryDates","remainingTime","timer","computed","formattedDiaryContent","replace","methods","now","Date","utc","getTime","getTimezoneOffset","kstTime","toISOString","split","resetTimer","updateTimer","logout","clearInterval","timerId","userId","localStorage","getItem","post","process","env","VUE_APP_BACKEND_URL","then","removeItem","$router","push","catch","error","console","handleBeforeUnload","handleDateSelect","date","fetchDiary","editDiary","fetchUserName","get","params","response","name","content","status","saveDiary","user_id","alert","fetchRecentDiaries","deleteDiary","confirm","delete","dates","formatDate","format","selectDiaryDate","formattedDate","isDateSelected","created","mounted","setInterval","window","addEventListener","beforeUnmount","removeEventListener"],"sources":["/Users/ewoo2/Library/CloudStorage/OneDrive-개인/문서/GitHub/공개SW프로젝트-Mac/Internet_Programming/my-diary-app/client/src/components/MainPage.vue"],"sourcesContent":["<template>\n  <div class=\"main-page\">\n    <!-- 메인 헤더 -->\n    <div class=\"main-header\">\n      <!-- 남은 시간 타이머 -->\n      <div class=\"timer\">자동 로그아웃: {{ remainingTime }}초</div>\n      <!-- 사용자 정보, 마이페이지 및 로그아웃 링크 -->\n      <div class=\"user-info\">\n        {{ userName }}님 | \n        <router-link to=\"/mypage\">마이페이지</router-link> |\n        <a href=\"#\" @click=\"logout\">로그아웃</a>\n      </div>\n    </div>\n\n    <!-- 메인 컨테이너 -->\n    <div class=\"main-container\">\n      <div class=\"diary-section\">\n        <!-- 날짜 선택 -->\n        일자 : <input type=\"date\" v-model=\"selectedDate\" @change=\"fetchDiary\">\n        <hr>\n        <!-- 일기장 표시 -->\n        <div v-if=\"diaryContent\" class=\"diary-content\">\n          <div v-html=\"formattedDiaryContent\"></div>\n          <br><br>\n          <button @click=\"editDiary\">수정</button>\n          <button @click=\"deleteDiary\">삭제</button>\n        </div>\n        <div v-else class=\"empty-diary\">\n          <textarea v-model=\"newDiaryContent\" cols=\"50\" rows=\"20\"></textarea>\n          <br>\n          <button @click=\"saveDiary\">저장</button>\n        </div>\n      </div>\n\n      <!-- 최근 작성한 일기 섹션 -->\n      <div class=\"recent-diaries\">\n        <h3>RECENT</h3>\n        <hr>\n        <div class=\"diary-list\">\n          <div v-for=\"date in recentDiaryDates\" :key=\"date\" class=\"diary-date\" :class=\"{ 'diary-date-selected': isDateSelected(date) }\" @click=\"selectDiaryDate(date)\">\n            {{ formatDate(date) }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n  \n<script>\nimport axios from 'axios';\nimport moment from 'moment';\n\nexport default {\n  data() {\n    return {\n      userName: '익명',\n      selectedDate: this.getCurrentDateInKST(),\n      diaryContent: null,\n      newDiaryContent: '',\n      recentDiaryDates: [], // 최근 작성한 일기 날짜 배열\n      remainingTime: 600, // 초단위 (10분)\n      timer: null\n    };\n  },\n  computed: {\n    formattedDiaryContent() {\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\n    }\n  },\n  methods: {\n    getCurrentDateInKST() {\n      const now = new Date();\n      const utc = now.getTime() + (now.getTimezoneOffset() * 60000); // UTC 시간\n      const kstTime = new Date(utc + (3600000 * 9)); // UTC+9\n      return kstTime.toISOString().split('T')[0];\n    },\n\n    resetTimer() {\n      this.remainingTime = 600; // 타이머를 10분으로 재설정\n    },\n\n    updateTimer() {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n      } else {\n        this.logout(); // 타이머가 0이 되면 로그아웃 실행\n      }\n    },\n    \n    logout() {\n      clearInterval(this.timerId); // 타이머 초기화\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, { userId })\n          .then(() => {\n            localStorage.removeItem('userId');\n            this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\n          })\n          .catch(error => {\n            console.error('로그아웃 실패:', error);\n          });\n      }\n    },\n\n    handleBeforeUnload() {\n      this.logout();\n    },\n\n    handleDateSelect(date) {\n      // 날짜를 선택하면 해당 날짜로 설정\n      this.selectedDate = date;\n      // 일기장 날짜를 선택한 날짜로 갱신\n      this.fetchDiary();\n    },\n\n    editDiary() {\n      // 수정 모드 활성화\n      this.newDiaryContent = this.diaryContent;\n      this.diaryContent = null;\n    },\n\n    fetchUserName() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/username`, {\n          params: {\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\n          }\n      })\n      .then(response => {\n          this.userName = response.data.name; // 사용자 이름 설정\n      })\n      .catch(error => {\n          console.error('Error fetching user name:', error);\n      });\n    },\n\n    fetchDiary() {\n      // 날짜 변경 시 기존 일기 내용 초기화\n      this.diaryContent = null;\n      this.newDiaryContent = '';\n\n      const userId = localStorage.getItem('userId');\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n        params: { userId }\n      })\n      .then(response => {\n        // 해당 날짜의 일기 내용이 존재하는 경우\n        this.diaryContent = response.data.content;\n      })\n      .catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 해당 날짜에 일기가 없는 경우\n          this.diaryContent = null;\n        } else {\n          console.error('Error fetching diary:', error);\n        }\n      });\n    },\n\n    saveDiary() {\n      const userId = localStorage.getItem('userId');\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/savediary`, {\n        user_id: userId,\n        date: this.selectedDate,\n        content: this.newDiaryContent\n      })\n      .then(() => {\n        this.diaryContent = this.newDiaryContent;\n        this.newDiaryContent = '';\n        alert('일기가 저장되었습니다.');\n        this.fetchRecentDiaries();\n      })\n      .catch(error => {\n        console.error('Error saving diary:', error);\n      });\n    },\n\n    deleteDiary() {\n      if (confirm('일기를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {\n        axios.delete(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n          params: { userId: localStorage.getItem('userId') }\n        })\n        .then(() => {\n          alert('일기가 삭제되었습니다.');\n          this.diaryContent = null; // 일기 내용 초기화\n          this.fetchRecentDiaries(); // 최근 일기 날짜 목록 갱신\n        })\n        .catch(error => {\n          console.error('Error deleting diary:', error);\n          alert('일기 삭제에 실패했습니다.');\n        });\n      }\n    },\n\n    // 최근 작성된 일기 날짜 가져오기\n    fetchRecentDiaries() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/recent-diaries`, {\n        params: { userId: localStorage.getItem('userId') }\n      })\n      .then(response => {\n        this.recentDiaryDates = response.data.dates; // 서버에서 반환된 날짜 배열\n      })\n      .catch(error => {\n        console.error('Error fetching recent diaries:', error);\n      });\n    },\n\n    formatDate(date) {\n      return moment(date).format('YYYY-MM-DD');\n    },\n\n    selectDiaryDate(date) {\n      // 날짜 형식 변환\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      this.selectedDate = formattedDate;\n      this.fetchDiary();\n    },\n\n    isDateSelected(date) {\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      return formattedDate === this.selectedDate;\n    },\n  },\n\n  created() {\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\n    this.fetchRecentDiaries(); // 컴포넌트 생성 시 최근 일기 날짜 조회\n    axios.get(`${process.env.VUE_APP_BACKEND_URL}/current-kst-date`)\n    .then(response => {\n      this.selectedDate = response.data.date;\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    })\n    .catch(error => {\n      console.error('Error fetching current KST date:', error);\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    });\n\n    // 로컬 스토리지에서 사용자 ID 확인\n    const userId = localStorage.getItem('userId');\n\n    // 사용자 ID가 없으면 로그인 페이지로 리디렉션\n    if (!userId) {\n      alert(\"비정상적인 접근입니다.\");\n      this.$router.push('/userlogin');\n    }\n  },\n  mounted() {\n    this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\n\n    // 사용자 활동 감지\n    window.addEventListener('mousemove', this.resetTimer);\n    window.addEventListener('keydown', this.resetTimer);\n  }, \n  beforeUnmount() {\n    clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\n    window.removeEventListener('mousemove', this.resetTimer);\n    window.removeEventListener('keydown', this.resetTimer);\n  }\n};\n</script>\n  \n<style>\n  .main-page {\n    padding: 20px;\n    max-width: 600px; /* 메인 페이지 최대 너비 조정 */\n    margin: auto;\n  }\n\n  .main-header {\n    display: flex;\n    justify-content: space-between; /* 좌우 균등 정렬 */\n    margin-bottom: 10px;\n  }\n\n  .timer {\n    text-align: left; /* 좌측 정렬 */\n  }\n\n  .user-info {\n    text-align: right; /* 우측 정렬 */\n  }\n  .main-container {\n    display: flex;\n    margin-top: 20px;\n    padding: 20px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  }\n\n  .diary-section {\n    flex: 80%; /* 메인 컨테이너 좌측 85% 너비 할당 */\n  }\n\n  .empty-diary {\n    width: 100%;\n    box-sizing: border-box;\n    padding: 10px;\n  }\n\n  .recent-diaries {\n    flex: 20%; /* 메인 컨테이너 우측 15% 너비 할당 */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border-left: 1px solid #ddd;\n    height: 380px;\n    overflow-y: auto; /* 내용이 넘칠 경우 스크롤 */\n  }\n\n  .recent-diaries h3 {\n    margin-top: 0px;\n    margin-bottom: 1px;\n  }\n\n  .recent-diaries hr {\n    width: 100%;\n    border-top: 1px solid gray;\n  }\n\n  .diary-date {\n    cursor: pointer;\n    text-align: center;\n    padding: 5px;\n    border: 1px solid #eee;\n    border-radius: 20px;\n    margin-bottom: 5px;\n    word-break: break-all;\n    width: auto;\n    background-color: rgb(198, 229, 240);\n    font-size: 13px;\n  }\n\n  .diary-date-selected {\n    background-color: rgb(101, 185, 219);\n  }\n\n  .diary-date:hover {\n    background-color: rgb(101, 185, 219);\n  }\n\n  button {\n    margin: 5px 5px;\n  }\n\n  /* 모바일 화면용 스타일 */\n  @media (max-width: 600px) {\n    .main-container {\n      flex-direction: column;\n    }\n\n    .diary-section, .recent-diaries {\n      width: 100%;\n      flex: none;\n      padding-left: 0;\n      padding-right: 0;\n    }\n\n    .empty-diary textarea {\n      width: 100%;\n      box-sizing: border-box;\n      padding: 10px;\n    }\n\n    .recent-diaries {\n      margin-top: 20px;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      border: 1px solid;\n    }\n\n    .recent-diaries h3 {\n      margin-top: 10px;\n      margin-bottom: 0px;\n    }\n\n    .recent-diaries hr {\n      width: 100%;\n      border-top: 1px solid gray;\n    }\n\n    .diary-date {\n      cursor: pointer;\n      text-align: center;\n      padding: 5px;\n      border: 1px solid #eee;\n      border-radius: 20px;\n      margin-bottom: 5px;\n      word-break: break-all;\n      width: auto;\n      background-color: rgb(198, 229, 240);\n      font-size: 13px;\n    }\n\n    button {\n      margin: 5px 5px;\n    }\n  }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}