{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userData: {\n        email: '',\n        password: '',\n        name: '',\n        phone: ''\n      },\n      confirmPassword: '',\n      isNameValid: false,\n      isPasswordEntered: false,\n      isPasswordValid: false,\n      isEmailValid: false,\n      isPhoneValid: false,\n      phoneExists: false\n    };\n  },\n  computed: {\n    isFormValid() {\n      return this.isEmailValid && this.isPasswordValid && this.isNameValid && this.isPhoneValid;\n    }\n  },\n  methods: {\n    // 이메일 필드에 대한 유효성 검사\n    validateEmail() {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      this.isEmailValid = emailPattern.test(this.userData.email);\n      this.emailExists = false; // 이메일 중복 확인 변수\n\n      if (this.isEmailValid) {\n        // 이메일 형식이 유효한 경우, 데이터베이스에서 중복 확인\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-email/${this.userData.email}`).then(() => {\n          // 이메일이 중복되지 않음\n          this.errorMessage = '';\n        }).catch(error => {\n          if (error.response && error.response.status === 409) {\n            // 409 Conflict - 이메일 중복\n            this.errorMessage = '이미 존재하는 메일입니다.';\n            this.emailExists = true;\n          } else {\n            this.errorMessage = error.response.data.message || '이메일 검증 중 오류가 발생했습니다.';\n          }\n        });\n      }\n    },\n    // 비밀번호 필드에 대한 유효성 검사\n    validatePassword() {\n      this.isPasswordEntered = this.userData.password.length > 0;\n      this.isPasswordMatch = this.userData.password === this.confirmPassword;\n      this.isPasswordValid = this.isPasswordEntered && this.isPasswordMatch;\n    },\n    // 이름 필드에 대한 유효성 검사\n    validateName() {\n      this.isNameValid = this.userData.name.length > 0;\n    },\n    // 전화번호 필드에 대한 유효성 검사\n    validatePhone() {\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n      this.isPhoneValid = phonePattern.test(this.userData.phone);\n      if (this.isPhoneValid) {\n        // 전화번호 형식이 유효한 경우, 데이터베이스에서 중복 확인\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-phone/${this.userData.phone}`).then(() => {\n          // 전화번호가 중복되지 않음\n          this.phoneExists = false;\n        }).catch(error => {\n          if (error.response && error.response.status === 409) {\n            // 409 Conflict - 전화번호 중복\n            this.phoneExists = true;\n          } else {\n            // 다른 오류 처리\n          }\n        });\n      }\n    },\n    // 전화번호 입력 형식 자동 변경\n    formatPhoneNumber() {\n      let numbers = this.userData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n      let formatted = '';\n\n      // 숫자를 형식에 맞게 '-' 추가\n      for (let i = 0; i < numbers.length; i++) {\n        if (i === 3 || i === 7) formatted += '-'; // 특정 위치에 '-' 추가\n        formatted += numbers[i];\n      }\n\n      // 최대 길이 제한 (010-XXXX-XXXX)\n      this.userData.phone = formatted.slice(0, 13);\n\n      // 전화번호 형식 검증 메소드 호출\n      this.validatePhone();\n    },\n    register() {\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/userregister`, this.userData).then(response => {\n        // 회원가입 성공 시 처리 로직\n        console.log('회원가입 성공:', response.data.message);\n        alert(\"회원가입이 완료되었습니다.\\n이메일 인증을 진행해주세요.\\n인증 링크는 이메일로 발송되었습니다.\");\n        // 로그인 페이지나 홈페이지로 리디렉션\n        this.$router.push('/userlogin');\n      }).catch(error => {\n        // 오류 메시지 초기화\n        alert(error.response.data.message || '회원가입에 실패했습니다.');\n        if (error.response) {\n          // 서버에서 반환된 오류 메시지 처리\n          this.errorMessage = error.response.data.message;\n          alert(`회원가입에 실패했습니다: ${this.errorMessage}`);\n        } else {\n          // 서버 오류 또는 네트워크 문제로 인한 회원가입 실패\n          this.errorMessage = \"서버 오류 또는 네트워크 문제로 인한 회원가입 실패\";\n          alert(this.errorMessage);\n        }\n\n        // 폼 데이터 초기화 및 페이지 새로고침\n        this.resetFormData();\n        location.reload();\n      });\n    },\n    resetFormData() {\n      // 사용자 데이터를 초기 상태로 재설정\n      this.userData.email = '';\n      this.userData.password = '';\n      this.userData.name = '';\n      this.userData.phone = '';\n      this.confirmPassword = '';\n      // 유효성 검사 상태도 초기화할 수 있습니다.\n      this.isNameValid = false;\n      this.isPasswordEntered = false;\n      this.isPasswordValid = false;\n      this.isEmailValid = false;\n      this.isPhoneValid = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","userData","email","password","name","phone","confirmPassword","isNameValid","isPasswordEntered","isPasswordValid","isEmailValid","isPhoneValid","phoneExists","computed","isFormValid","methods","validateEmail","emailPattern","test","emailExists","get","process","env","VUE_APP_BACKEND_URL","then","errorMessage","catch","error","response","status","message","validatePassword","length","isPasswordMatch","validateName","validatePhone","phonePattern","formatPhoneNumber","numbers","replace","formatted","i","slice","register","post","console","log","alert","$router","push","resetFormData","location","reload"],"sources":["/Users/ewoo2/Library/CloudStorage/OneDrive-개인/문서/GitHub/공개SW프로젝트-Mac/Internet_Programming/my-diary-app/client/src/components/UserRegister.vue"],"sourcesContent":["<template>\n  <div class=\"register-container\">\n    <h1>회원가입</h1>\n    <form @submit.prevent=\"register\">\n      <div>\n        <label for=\"email\">이메일:</label>\n        <input type=\"email\" id=\"email\" v-model=\"userData.email\" @input=\"validateEmail\" :class=\"{ 'is-invalid': !isEmailValid || emailExists, 'is-valid': isEmailValid && !emailExists }\" required>\n        <p v-if=\"!isEmailValid\" class=\"warning-text\">유효한 이메일 주소를 입력해주세요.</p>\n        <p v-else-if=\"emailExists\" class=\"warning-text\">이미 존재하는 메일입니다.</p>\n      </div>\n      <div>\n        <label for=\"password\">비밀번호:</label>\n        <input type=\"password\" id=\"password\" v-model=\"userData.password\" @input=\"validatePassword\" :class=\"{ 'is-invalid': !isPasswordEntered, 'is-valid': isPasswordEntered }\" required>\n        <p v-if=\"!isPasswordEntered\" class=\"warning-text\">비밀번호를 입력해주세요.</p>\n      </div>\n      <div>\n        <label for=\"confirmPassword\">비밀번호 확인:</label>\n        <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" @input=\"validatePassword\" :class=\"{ 'is-invalid': !isPasswordValid, 'is-valid': isPasswordValid && confirmPassword }\" required>\n        <p v-if=\"!isPasswordMatch && confirmPassword\" class=\"warning-text\">비밀번호가 일치하지 않습니다.</p>\n      </div>\n      <div>\n        <label for=\"name\">이름:</label>\n        <input type=\"text\" id=\"name\" v-model=\"userData.name\" @input=\"validateName\" :class=\"{ 'is-invalid': !isNameValid, 'is-valid': isNameValid }\" required>\n        <p v-if=\"!userData.name\" class=\"warning-text\">이름을 입력해주세요.</p>\n      </div>\n      <div>\n        <label for=\"phone\">전화번호:</label>\n        <input type=\"text\" id=\"phone\" v-model=\"userData.phone\" @input=\"formatPhoneNumber\" :class=\"{ 'is-invalid': !isPhoneValid || phoneExists, 'is-valid': isPhoneValid && !phoneExists }\" required>\n        <p v-if=\"!isPhoneValid\" class=\"warning-text\">01x-xxxx-xxxx 형식으로 입력해주세요.</p>\n        <p v-else-if=\"phoneExists\" class=\"warning-text\">이미 사용 중인 전화번호입니다.</p>\n      </div>\n      <button type=\"submit\" :disabled=\"!isFormValid\" :class=\"{ 'button-active': isFormValid, 'button-inactive': !isFormValid }\">등록</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      userData: {\n        email: '',\n        password: '',\n        name: '',\n        phone: ''\n      },\n      confirmPassword: '',\n      isNameValid: false,\n      isPasswordEntered: false,\n      isPasswordValid: false,\n      isEmailValid: false,\n      isPhoneValid: false,\n      phoneExists: false,\n    };\n  },\n  computed: {\n    isFormValid() {\n      return (\n        this.isEmailValid &&\n        this.isPasswordValid &&\n        this.isNameValid &&\n        this.isPhoneValid\n      );\n    }\n  },\n  methods: {\n    // 이메일 필드에 대한 유효성 검사\n    validateEmail() {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      this.isEmailValid = emailPattern.test(this.userData.email);\n      this.emailExists = false; // 이메일 중복 확인 변수\n\n      if (this.isEmailValid) {\n        // 이메일 형식이 유효한 경우, 데이터베이스에서 중복 확인\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-email/${this.userData.email}`)\n          .then(() => {\n            // 이메일이 중복되지 않음\n            this.errorMessage = '';\n          })\n          .catch(error => {\n            if (error.response && error.response.status === 409) { // 409 Conflict - 이메일 중복\n              this.errorMessage = '이미 존재하는 메일입니다.';\n              this.emailExists = true;\n            } else {\n              this.errorMessage = error.response.data.message || '이메일 검증 중 오류가 발생했습니다.';\n            }\n          });\n      }\n    },\n    // 비밀번호 필드에 대한 유효성 검사\n    validatePassword() {\n      this.isPasswordEntered = this.userData.password.length > 0;\n      this.isPasswordMatch = this.userData.password === this.confirmPassword;\n      this.isPasswordValid = this.isPasswordEntered && this.isPasswordMatch;\n    },\n    // 이름 필드에 대한 유효성 검사\n    validateName() {\n      this.isNameValid = this.userData.name.length > 0;\n    },\n    // 전화번호 필드에 대한 유효성 검사\n    validatePhone() {\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n      this.isPhoneValid = phonePattern.test(this.userData.phone);\n\n      if (this.isPhoneValid) {\n        // 전화번호 형식이 유효한 경우, 데이터베이스에서 중복 확인\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-phone/${this.userData.phone}`)\n          .then(() => {\n            // 전화번호가 중복되지 않음\n            this.phoneExists = false;\n          })\n          .catch(error => {\n            if (error.response && error.response.status === 409) { // 409 Conflict - 전화번호 중복\n              this.phoneExists = true;\n            } else {\n              // 다른 오류 처리\n            }\n          });\n      }\n    },\n    // 전화번호 입력 형식 자동 변경\n    formatPhoneNumber() {\n      let numbers = this.userData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n      let formatted = '';\n\n      // 숫자를 형식에 맞게 '-' 추가\n      for (let i = 0; i < numbers.length; i++) {\n        if (i === 3 || i === 7) formatted += '-'; // 특정 위치에 '-' 추가\n        formatted += numbers[i];\n      }\n\n      // 최대 길이 제한 (010-XXXX-XXXX)\n      this.userData.phone = formatted.slice(0, 13);\n\n      // 전화번호 형식 검증 메소드 호출\n      this.validatePhone();\n    },\n    register() {\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/userregister`, this.userData)\n        .then(response => {\n          // 회원가입 성공 시 처리 로직\n          console.log('회원가입 성공:', response.data.message);\n          alert(\"회원가입이 완료되었습니다.\\n이메일 인증을 진행해주세요.\\n인증 링크는 이메일로 발송되었습니다.\");\n          // 로그인 페이지나 홈페이지로 리디렉션\n          this.$router.push('/userlogin');\n        })\n        .catch(error => {\n          // 오류 메시지 초기화\n          alert(error.response.data.message || '회원가입에 실패했습니다.')\n\n          if (error.response) {\n            // 서버에서 반환된 오류 메시지 처리\n            this.errorMessage = error.response.data.message;\n            alert(`회원가입에 실패했습니다: ${this.errorMessage}`);\n          } else {\n            // 서버 오류 또는 네트워크 문제로 인한 회원가입 실패\n            this.errorMessage = \"서버 오류 또는 네트워크 문제로 인한 회원가입 실패\";\n            alert(this.errorMessage);\n          }\n\n          // 폼 데이터 초기화 및 페이지 새로고침\n          this.resetFormData();\n          location.reload();\n        });\n    },\n    resetFormData() {\n      // 사용자 데이터를 초기 상태로 재설정\n      this.userData.email = '';\n      this.userData.password = '';\n      this.userData.name = '';\n      this.userData.phone = '';\n      this.confirmPassword = '';\n      // 유효성 검사 상태도 초기화할 수 있습니다.\n      this.isNameValid = false;\n      this.isPasswordEntered = false;\n      this.isPasswordValid = false;\n      this.isEmailValid = false;\n      this.isPhoneValid = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.register-container {\n  max-width: 300px;\n  margin: auto;\n  padding: 20px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nlabel {\n  display: block;\n}\n\ninput[type=\"email\"],\ninput[type=\"password\"],\ninput[type=\"text\"],\n\nbutton {\n  width: 80%;\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ddd;\n}\n\nbutton {\n  padding: 10px;\n  background-color: blue;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n/* 버튼에 대한 활성화 스타일 */\nbutton.button-active {\n  background-color: blue;\n  color: white;\n}\n\n/* 버튼에 대한 비활성화 스타일 */\nbutton.button-inactive {\n  background-color: #ccc;\n  color: #666;\n  cursor: not-allowed;\n}\n\ninput.is-valid {\n  border: 1px solid green !important;\n}\n\ninput.is-invalid {\n  border: 1px solid red !important;\n}\n\n.warning-text {\n  color: red;\n  font-size: 0.8em;\n  margin-top: -10px;\n  margin-bottom: 10px;\n}\n</style>\n  "],"mappings":";AAqCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE;MACT,CAAC;MACDC,eAAe,EAAE,EAAE;MACnBC,WAAW,EAAE,KAAK;MAClBC,iBAAiB,EAAE,KAAK;MACxBC,eAAe,EAAE,KAAK;MACtBC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE,KAAK;MACnBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OACE,IAAI,CAACJ,YAAW,IAChB,IAAI,CAACD,eAAc,IACnB,IAAI,CAACF,WAAU,IACf,IAAI,CAACI,YAAW;IAEpB;EACF,CAAC;EACDI,OAAO,EAAE;IACP;IACAC,aAAaA,CAAA,EAAG;MACd,MAAMC,YAAW,GAAI,4BAA4B;MACjD,IAAI,CAACP,YAAW,GAAIO,YAAY,CAACC,IAAI,CAAC,IAAI,CAACjB,QAAQ,CAACC,KAAK,CAAC;MAC1D,IAAI,CAACiB,WAAU,GAAI,KAAK,EAAE;;MAE1B,IAAI,IAAI,CAACT,YAAY,EAAE;QACrB;QACAX,KAAK,CAACqB,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,gBAAe,IAAI,CAACtB,QAAQ,CAACC,KAAM,EAAC,EAC9EsB,IAAI,CAAC,MAAM;UACV;UACA,IAAI,CAACC,YAAW,GAAI,EAAE;QACxB,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;UACd,IAAIA,KAAK,CAACC,QAAO,IAAKD,KAAK,CAACC,QAAQ,CAACC,MAAK,KAAM,GAAG,EAAE;YAAE;YACrD,IAAI,CAACJ,YAAW,GAAI,gBAAgB;YACpC,IAAI,CAACN,WAAU,GAAI,IAAI;UACzB,OAAO;YACL,IAAI,CAACM,YAAW,GAAIE,KAAK,CAACC,QAAQ,CAAC5B,IAAI,CAAC8B,OAAM,IAAK,sBAAsB;UAC3E;QACF,CAAC,CAAC;MACN;IACF,CAAC;IACD;IACAC,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACvB,iBAAgB,GAAI,IAAI,CAACP,QAAQ,CAACE,QAAQ,CAAC6B,MAAK,GAAI,CAAC;MAC1D,IAAI,CAACC,eAAc,GAAI,IAAI,CAAChC,QAAQ,CAACE,QAAO,KAAM,IAAI,CAACG,eAAe;MACtE,IAAI,CAACG,eAAc,GAAI,IAAI,CAACD,iBAAgB,IAAK,IAAI,CAACyB,eAAe;IACvE,CAAC;IACD;IACAC,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC3B,WAAU,GAAI,IAAI,CAACN,QAAQ,CAACG,IAAI,CAAC4B,MAAK,GAAI,CAAC;IAClD,CAAC;IACD;IACAG,aAAaA,CAAA,EAAG;MACd,MAAMC,YAAW,GAAI,+BAA+B;MACpD,IAAI,CAACzB,YAAW,GAAIyB,YAAY,CAAClB,IAAI,CAAC,IAAI,CAACjB,QAAQ,CAACI,KAAK,CAAC;MAE1D,IAAI,IAAI,CAACM,YAAY,EAAE;QACrB;QACAZ,KAAK,CAACqB,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,gBAAe,IAAI,CAACtB,QAAQ,CAACI,KAAM,EAAC,EAC9EmB,IAAI,CAAC,MAAM;UACV;UACA,IAAI,CAACZ,WAAU,GAAI,KAAK;QAC1B,CAAC,EACAc,KAAK,CAACC,KAAI,IAAK;UACd,IAAIA,KAAK,CAACC,QAAO,IAAKD,KAAK,CAACC,QAAQ,CAACC,MAAK,KAAM,GAAG,EAAE;YAAE;YACrD,IAAI,CAACjB,WAAU,GAAI,IAAI;UACzB,OAAO;YACL;UAAA;QAEJ,CAAC,CAAC;MACN;IACF,CAAC;IACD;IACAyB,iBAAiBA,CAAA,EAAG;MAClB,IAAIC,OAAM,GAAI,IAAI,CAACrC,QAAQ,CAACI,KAAK,CAACkC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE;MACzD,IAAIC,SAAQ,GAAI,EAAE;;MAElB;MACA,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,OAAO,CAACN,MAAM,EAAES,CAAC,EAAE,EAAE;QACvC,IAAIA,CAAA,KAAM,KAAKA,CAAA,KAAM,CAAC,EAAED,SAAQ,IAAK,GAAG,EAAE;QAC1CA,SAAQ,IAAKF,OAAO,CAACG,CAAC,CAAC;MACzB;;MAEA;MACA,IAAI,CAACxC,QAAQ,CAACI,KAAI,GAAImC,SAAS,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;;MAE5C;MACA,IAAI,CAACP,aAAa,CAAC,CAAC;IACtB,CAAC;IACDQ,QAAQA,CAAA,EAAG;MACT5C,KAAK,CAAC6C,IAAI,CAAE,GAAEvB,OAAO,CAACC,GAAG,CAACC,mBAAoB,eAAc,EAAE,IAAI,CAACtB,QAAQ,EACxEuB,IAAI,CAACI,QAAO,IAAK;QAChB;QACAiB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAElB,QAAQ,CAAC5B,IAAI,CAAC8B,OAAO,CAAC;QAC9CiB,KAAK,CAAC,uDAAuD,CAAC;QAC9D;QACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;MACjC,CAAC,EACAvB,KAAK,CAACC,KAAI,IAAK;QACd;QACAoB,KAAK,CAACpB,KAAK,CAACC,QAAQ,CAAC5B,IAAI,CAAC8B,OAAM,IAAK,eAAe;QAEpD,IAAIH,KAAK,CAACC,QAAQ,EAAE;UAClB;UACA,IAAI,CAACH,YAAW,GAAIE,KAAK,CAACC,QAAQ,CAAC5B,IAAI,CAAC8B,OAAO;UAC/CiB,KAAK,CAAE,iBAAgB,IAAI,CAACtB,YAAa,EAAC,CAAC;QAC7C,OAAO;UACL;UACA,IAAI,CAACA,YAAW,GAAI,8BAA8B;UAClDsB,KAAK,CAAC,IAAI,CAACtB,YAAY,CAAC;QAC1B;;QAEA;QACA,IAAI,CAACyB,aAAa,CAAC,CAAC;QACpBC,QAAQ,CAACC,MAAM,CAAC,CAAC;MACnB,CAAC,CAAC;IACN,CAAC;IACDF,aAAaA,CAAA,EAAG;MACd;MACA,IAAI,CAACjD,QAAQ,CAACC,KAAI,GAAI,EAAE;MACxB,IAAI,CAACD,QAAQ,CAACE,QAAO,GAAI,EAAE;MAC3B,IAAI,CAACF,QAAQ,CAACG,IAAG,GAAI,EAAE;MACvB,IAAI,CAACH,QAAQ,CAACI,KAAI,GAAI,EAAE;MACxB,IAAI,CAACC,eAAc,GAAI,EAAE;MACzB;MACA,IAAI,CAACC,WAAU,GAAI,KAAK;MACxB,IAAI,CAACC,iBAAgB,GAAI,KAAK;MAC9B,IAAI,CAACC,eAAc,GAAI,KAAK;MAC5B,IAAI,CAACC,YAAW,GAAI,KAAK;MACzB,IAAI,CAACC,YAAW,GAAI,KAAK;IAC3B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}