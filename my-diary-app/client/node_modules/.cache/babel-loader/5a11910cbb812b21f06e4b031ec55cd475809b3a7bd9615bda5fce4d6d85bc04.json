{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userName: '익명',\n      selectedDate: this.getCurrentDateInKST(),\n      diaryContent: null,\n      newDiaryContent: ''\n    };\n  },\n  computed: {\n    formattedDiaryContent() {\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\n    }\n  },\n  methods: {\n    getCurrentDateInKST() {\n      const now = new Date();\n      const utc = now.getTime() + now.getTimezoneOffset() * 60000; // UTC 시간\n      const kstTime = new Date(utc + 3600000 * 9); // UTC+9\n      return kstTime.toISOString().split('T')[0];\n    },\n    logout() {\n      // 로컬 스토리지에서 사용자 ID 삭제\n      localStorage.removeItem('userId');\n      // 로그인 페이지로 리디렉션\n      this.$router.push('/userlogin');\n    },\n    handleDateSelect(date) {\n      console.log('Selected date:', date);\n      this.$router.push({\n        name: 'WriteDiary',\n        query: {\n          date: date.toISOString()\n        }\n      });\n    },\n    editDiary() {\n      // 수정 모드 활성화\n      this.newDiaryContent = this.diaryContent;\n      this.diaryContent = null;\n    },\n    fetchUserName() {\n      axios.get('http://localhost:3000/username', {\n        params: {\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\n        }\n      }).then(response => {\n        this.userName = response.data.name; // 사용자 이름 설정\n      }).catch(error => {\n        console.error('Error fetching user name:', error);\n      });\n    },\n    fetchDiary() {\n      // 날짜 변경 시 기존 일기 내용 초기화\n      this.diaryContent = null;\n      this.newDiaryContent = '';\n      const userId = localStorage.getItem('userId');\n      axios.get(`http://localhost:3000/diary/${this.selectedDate}`, {\n        params: {\n          userId\n        }\n      }).then(response => {\n        // 해당 날짜의 일기 내용이 존재하는 경우\n        this.diaryContent = response.data.content;\n      }).catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 해당 날짜에 일기가 없는 경우\n          this.diaryContent = null;\n        } else {\n          console.error('Error fetching diary:', error);\n        }\n      });\n    },\n    saveDiary() {\n      const userId = localStorage.getItem('userId');\n      axios.post('http://localhost:3000/savediary', {\n        user_id: userId,\n        date: this.selectedDate,\n        content: this.newDiaryContent\n      }).then(() => {\n        this.diaryContent = this.newDiaryContent;\n        this.newDiaryContent = '';\n        alert('일기가 저장되었습니다.');\n      }).catch(error => {\n        console.error('Error saving diary:', error);\n      });\n    }\n  },\n  created() {\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\n    axios.get('http://localhost:3000/current-kst-date').then(response => {\n      this.selectedDate = response.data.date;\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    }).catch(error => {\n      console.error('Error fetching current KST date:', error);\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    });\n  }\n};","map":{"version":3,"names":["axios","data","userName","selectedDate","getCurrentDateInKST","diaryContent","newDiaryContent","computed","formattedDiaryContent","replace","methods","now","Date","utc","getTime","getTimezoneOffset","kstTime","toISOString","split","logout","localStorage","removeItem","$router","push","handleDateSelect","date","console","log","name","query","editDiary","fetchUserName","get","params","userId","getItem","then","response","catch","error","fetchDiary","content","status","saveDiary","post","user_id","alert","created"],"sources":["/Users/ewoo2/Library/CloudStorage/OneDrive-개인/문서/GitHub/공개SW프로젝트-Mac/Internet_Programming/my-diary-app/client/src/components/MainPage.vue"],"sourcesContent":["<template>\n  <div class=\"main-page\">\n    <!-- 사용자 정보, 마이페이지 및 로그아웃 링크 -->\n    <div class=\"user-info\">\n      {{ userName }}님 | \n      <router-link to=\"/mypage\">마이페이지</router-link> |\n      <a href=\"#\" @click=\"logout\">로그아웃</a>\n    </div>\n\n    <!-- 메인 컨테이너 -->\n    <div class=\"main-container\">\n      <!-- 날짜 선택 -->\n      일자 : <input type=\"date\" v-model=\"selectedDate\" @change=\"fetchDiary\">\n      <hr>\n      <!-- 일기장 표시 -->\n      <div v-if=\"diaryContent\" class=\"diary-content\">\n        <div v-html=\"formattedDiaryContent\"></div>\n        <br><br>\n        <button @click=\"editDiary\">수정</button>\n      </div>\n      <div v-else class=\"empty-diary\">\n        <textarea v-model=\"newDiaryContent\" cols=\"50\" rows=\"20\"></textarea>\n        <br>\n        <button @click=\"saveDiary\">저장</button>\n      </div>\n    </div>\n  </div>\n</template>\n  \n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      userName: '익명',\n      selectedDate: this.getCurrentDateInKST(),\n      diaryContent: null,\n      newDiaryContent: '',\n    };\n  },\n  computed: {\n    formattedDiaryContent() {\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\n    }\n  },\n  methods: {\n    getCurrentDateInKST() {\n      const now = new Date();\n      const utc = now.getTime() + (now.getTimezoneOffset() * 60000); // UTC 시간\n      const kstTime = new Date(utc + (3600000 * 9)); // UTC+9\n      return kstTime.toISOString().split('T')[0];\n    },\n\n    logout() {\n      // 로컬 스토리지에서 사용자 ID 삭제\n      localStorage.removeItem('userId');\n      // 로그인 페이지로 리디렉션\n      this.$router.push('/userlogin');\n    },\n\n    handleDateSelect(date) {\n      console.log('Selected date:', date);\n      this.$router.push({ name: 'WriteDiary', query: { date: date.toISOString() } });\n    },\n\n    editDiary() {\n      // 수정 모드 활성화\n      this.newDiaryContent = this.diaryContent;\n      this.diaryContent = null;\n    },\n\n    fetchUserName() {\n      axios.get('http://localhost:3000/username', {\n          params: {\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\n          }\n      })\n      .then(response => {\n          this.userName = response.data.name; // 사용자 이름 설정\n      })\n      .catch(error => {\n          console.error('Error fetching user name:', error);\n      });\n    },\n\n    fetchDiary() {\n      // 날짜 변경 시 기존 일기 내용 초기화\n      this.diaryContent = null;\n      this.newDiaryContent = '';\n\n      const userId = localStorage.getItem('userId');\n      axios.get(`http://localhost:3000/diary/${this.selectedDate}`, {\n        params: { userId }\n      })\n      .then(response => {\n        // 해당 날짜의 일기 내용이 존재하는 경우\n        this.diaryContent = response.data.content;\n      })\n      .catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 해당 날짜에 일기가 없는 경우\n          this.diaryContent = null;\n        } else {\n          console.error('Error fetching diary:', error);\n        }\n      });\n    },\n\n    saveDiary() {\n      const userId = localStorage.getItem('userId');\n      axios.post('http://localhost:3000/savediary', {\n        user_id: userId,\n        date: this.selectedDate,\n        content: this.newDiaryContent\n      })\n      .then(() => {\n        this.diaryContent = this.newDiaryContent;\n        this.newDiaryContent = '';\n        alert('일기가 저장되었습니다.');\n      })\n      .catch(error => {\n        console.error('Error saving diary:', error);\n      });\n    }\n  },\n  created() {\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\n    axios.get('http://localhost:3000/current-kst-date')\n    .then(response => {\n      this.selectedDate = response.data.date;\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    })\n    .catch(error => {\n      console.error('Error fetching current KST date:', error);\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    });\n  }\n};\n</script>\n  \n<style>\n  .main-page {\n    padding: 20px;\n    max-width: 800px;\n    margin: auto;\n  }\n\n  .user-info {\n    text-align: right;\n    font-size: 1.2em;\n    margin-bottom: 20px;\n  }\n  \n  .main-container {\n    max-width: 500px;\n    margin: auto;\n    padding: 20px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  }\n\n  .main-container input {\n    margin-bottom: 5px;\n  }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}