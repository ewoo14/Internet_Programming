{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main-page\"\n};\nconst _hoisted_2 = {\n  class: \"user-info\"\n};\nconst _hoisted_3 = {\n  class: \"main-container\"\n};\nconst _hoisted_4 = {\n  class: \"upper-container\"\n};\nconst _hoisted_5 = {\n  class: \"diary-section\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"diary-content\"\n};\nconst _hoisted_7 = [\"innerHTML\"];\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_10 = {\n  key: 1,\n  class: \"empty-diary\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"recent-diaries\"\n};\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"RECENT\", -1 /* HOISTED */);\nconst _hoisted_14 = {\n  class: \"diary-list\"\n};\nconst _hoisted_15 = [\"onClick\"];\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 사용자 정보, 마이페이지 및 로그아웃 링크 \"), _createElementVNode(\"div\", _hoisted_2, [_createTextVNode(_toDisplayString($data.userName) + \"님 | \", 1 /* TEXT */), _createVNode(_component_router_link, {\n    to: \"/mypage\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"마이페이지\")]),\n    _: 1 /* STABLE */\n  }), _createTextVNode(\" | \"), _createElementVNode(\"a\", {\n    href: \"#\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.logout && $options.logout(...args))\n  }, \"로그아웃\")]), _createCommentVNode(\" 메인 컨테이너 \"), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" 상단 컨테이너: '일자:'와 'RECENT' 섹션을 감싸는 컨테이너 \"), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 날짜 선택 섹션 \"), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" 날짜 선택 \"), _createTextVNode(\" 일자 : \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedDate = $event),\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.fetchDiary && $options.fetchDiary(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.selectedDate]]), _createCommentVNode(\" 일기장 표시 \"), $data.diaryContent ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", {\n    innerHTML: $options.formattedDiaryContent\n  }, null, 8 /* PROPS */, _hoisted_7), _hoisted_8, _hoisted_9, _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.editDiary && $options.editDiary(...args))\n  }, \"수정\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.newDiaryContent = $event),\n    cols: \"50\",\n    rows: \"20\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newDiaryContent]]), _hoisted_11, _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.saveDiary && $options.saveDiary(...args))\n  }, \"저장\")]))]), _createCommentVNode(\" 최근 작성한 일기 섹션 \"), _createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _createElementVNode(\"div\", _hoisted_14, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.recentDiaryDates, date => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: date,\n      class: _normalizeClass([\"diary-date\", {\n        'diary-date-selected': $options.isDateSelected(date)\n      }]),\n      onClick: $event => $options.selectDiaryDate(date)\n    }, _toDisplayString($options.formatDate(date)), 11 /* TEXT, CLASS, PROPS */, _hoisted_15);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createCommentVNode(\" 상단 컨테이너 아래의 경계선 \"), _hoisted_16])]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_createTextVNode","_toDisplayString","$data","userName","_createVNode","_component_router_link","to","default","_withCtx","_","href","onClick","_cache","args","$options","logout","_hoisted_3","_hoisted_4","_hoisted_5","type","$event","selectedDate","onChange","fetchDiary","diaryContent","_hoisted_6","innerHTML","formattedDiaryContent","_hoisted_7","_hoisted_8","_hoisted_9","editDiary","_hoisted_10","newDiaryContent","cols","rows","_hoisted_11","saveDiary","_hoisted_12","_hoisted_13","_hoisted_14","_Fragment","_renderList","recentDiaryDates","date","_normalizeClass","isDateSelected","selectDiaryDate","formatDate","_hoisted_15","_hoisted_16"],"sources":["C:\\Users\\ewoo2\\OneDrive\\문서\\GitHub\\공개SW프로젝트-Win\\Internet_Programming\\my-diary-app\\client\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-page\">\r\n    <!-- 사용자 정보, 마이페이지 및 로그아웃 링크 -->\r\n    <div class=\"user-info\">\r\n      {{ userName }}님 | \r\n      <router-link to=\"/mypage\">마이페이지</router-link> |\r\n      <a href=\"#\" @click=\"logout\">로그아웃</a>\r\n    </div>\r\n\r\n    <!-- 메인 컨테이너 -->\r\n    <div class=\"main-container\">\r\n      <!-- 상단 컨테이너: '일자:'와 'RECENT' 섹션을 감싸는 컨테이너 -->\r\n      <div class=\"upper-container\">\r\n        <!-- 날짜 선택 섹션 -->\r\n        <div class=\"diary-section\">\r\n          <!-- 날짜 선택 -->\r\n          일자 : <input type=\"date\" v-model=\"selectedDate\" @change=\"fetchDiary\">\r\n          <!-- 일기장 표시 -->\r\n          <div v-if=\"diaryContent\" class=\"diary-content\">\r\n            <div v-html=\"formattedDiaryContent\"></div>\r\n            <br><br>\r\n            <button @click=\"editDiary\">수정</button>\r\n          </div>\r\n          <div v-else class=\"empty-diary\">\r\n            <textarea v-model=\"newDiaryContent\" cols=\"50\" rows=\"20\"></textarea>\r\n            <br>\r\n            <button @click=\"saveDiary\">저장</button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 최근 작성한 일기 섹션 -->\r\n        <div class=\"recent-diaries\">\r\n          <h3>RECENT</h3>\r\n          <div class=\"diary-list\">\r\n            <div \r\n              v-for=\"date in recentDiaryDates\" \r\n              :key=\"date\" \r\n              class=\"diary-date\" \r\n              :class=\"{ 'diary-date-selected': isDateSelected(date) }\" \r\n              @click=\"selectDiaryDate(date)\"\r\n            >\r\n              {{ formatDate(date) }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- 상단 컨테이너 아래의 경계선 -->\r\n      <hr/>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      userName: '익명',\r\n      selectedDate: this.getCurrentDateInKST(),\r\n      diaryContent: null,\r\n      newDiaryContent: '',\r\n      recentDiaryDates: [], // 최근 작성한 일기 날짜 배열\r\n    };\r\n  },\r\n  computed: {\r\n    formattedDiaryContent() {\r\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\r\n    }\r\n  },\r\n  methods: {\r\n    getCurrentDateInKST() {\r\n      const now = new Date();\r\n      const utc = now.getTime() + (now.getTimezoneOffset() * 60000); // UTC 시간\r\n      const kstTime = new Date(utc + (3600000 * 9)); // UTC+9\r\n      return kstTime.toISOString().split('T')[0];\r\n    },\r\n\r\n    logout() {\r\n      // 로컬 스토리지에서 사용자 ID 삭제\r\n      localStorage.removeItem('userId');\r\n      // 로그인 페이지로 리디렉션\r\n      this.$router.push('/userlogin');\r\n    },\r\n\r\n    handleDateSelect(date) {\r\n      // 날짜를 선택하면 해당 날짜로 설정\r\n      this.selectedDate = date;\r\n      // 일기장 날짜를 선택한 날짜로 갱신\r\n      this.fetchDiary();\r\n    },\r\n\r\n    editDiary() {\r\n      // 수정 모드 활성화\r\n      this.newDiaryContent = this.diaryContent;\r\n      this.diaryContent = null;\r\n    },\r\n\r\n    fetchUserName() {\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/username`, {\r\n          params: {\r\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\r\n          }\r\n      })\r\n      .then(response => {\r\n          this.userName = response.data.name; // 사용자 이름 설정\r\n      })\r\n      .catch(error => {\r\n          console.error('Error fetching user name:', error);\r\n      });\r\n    },\r\n\r\n    fetchDiary() {\r\n      // 날짜 변경 시 기존 일기 내용 초기화\r\n      this.diaryContent = null;\r\n      this.newDiaryContent = '';\r\n\r\n      const userId = localStorage.getItem('userId');\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\r\n        params: { userId }\r\n      })\r\n      .then(response => {\r\n        // 해당 날짜의 일기 내용이 존재하는 경우\r\n        this.diaryContent = response.data.content;\r\n      })\r\n      .catch(error => {\r\n        if (error.response && error.response.status === 404) {\r\n          // 해당 날짜에 일기가 없는 경우\r\n          this.diaryContent = null;\r\n        } else {\r\n          console.error('Error fetching diary:', error);\r\n        }\r\n      });\r\n    },\r\n\r\n    saveDiary() {\r\n      const userId = localStorage.getItem('userId');\r\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/savediary`, {\r\n        user_id: userId,\r\n        date: this.selectedDate,\r\n        content: this.newDiaryContent\r\n      })\r\n      .then(() => {\r\n        this.diaryContent = this.newDiaryContent;\r\n        this.newDiaryContent = '';\r\n        alert('일기가 저장되었습니다.');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error saving diary:', error);\r\n      });\r\n    },\r\n\r\n    // 최근 작성된 일기 날짜 가져오기\r\n    fetchRecentDiaries() {\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/recent-diaries`, {\r\n        params: { userId: localStorage.getItem('userId') }\r\n      })\r\n      .then(response => {\r\n        this.recentDiaryDates = response.data.dates; // 서버에서 반환된 날짜 배열\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching recent diaries:', error);\r\n      });\r\n    },\r\n\r\n    formatDate(date) {\r\n      return moment(date).format('YYYY-MM-DD');\r\n    },\r\n\r\n    selectDiaryDate(date) {\r\n      // 날짜 형식 변환\r\n      const formattedDate = moment(date).format('YYYY-MM-DD');\r\n      this.selectedDate = formattedDate;\r\n      this.fetchDiary();\r\n    },\r\n\r\n    isDateSelected(date) {\r\n      const formattedDate = moment(date).format('YYYY-MM-DD');\r\n      return formattedDate === this.selectedDate;\r\n    },\r\n  },\r\n\r\n  created() {\r\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\r\n    this.fetchRecentDiaries(); // 컴포넌트 생성 시 최근 일기 날짜 조회\r\n    axios.get(`${process.env.VUE_APP_BACKEND_URL}/current-kst-date`)\r\n    .then(response => {\r\n      this.selectedDate = response.data.date;\r\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching current KST date:', error);\r\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\r\n    });\r\n\r\n    // 로컬 스토리지에서 사용자 ID 확인\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    // 사용자 ID가 없으면 로그인 페이지로 리디렉션\r\n    if (!userId) {\r\n      alert(\"비정상적인 접근입니다.\");\r\n      this.$router.push('/userlogin');\r\n    }\r\n  }\r\n};\r\n</script>\r\n  \r\n<style>\r\n  .main-page {\r\n    padding: 20px;\r\n    max-width: 600px; /* 메인 페이지 최대 너비 조정 */\r\n    margin: auto;\r\n  }\r\n\r\n  .main-container {\r\n    display: flex; /* Flexbox 레이아웃 사용 */\r\n    margin-top: 50px;\r\n    padding: 20px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    border-top: 1px solid #ddd;\r\n  }\r\n\r\n  .diary-section {\r\n    flex: 85%; /* 메인 컨테이너 좌측 85% 너비 할당 */\r\n  }\r\n\r\n  .recent-diaries {\r\n    flex: 15%; /* 메인 컨테이너 우측 15% 너비 할당 */\r\n    padding-left: 20px;\r\n    border-left: 1px solid #ddd;\r\n    height: 380px;\r\n    overflow-y: auto; /* 내용이 넘칠 경우 스크롤 */\r\n  }\r\n\r\n  .diary-date {\r\n    cursor: pointer;\r\n    text-align: center;\r\n    padding: 5px;\r\n    border: 1px solid #eee;\r\n    margin-bottom: 5px;\r\n    word-break: break-all;\r\n    width: auto;\r\n    background-color: rgb(198, 229, 240);\r\n    font-size: 13px;\r\n  }\r\n\r\n  .diary-date-selected {\r\n    background-color: rgb(101, 185, 219);\r\n  }\r\n\r\n  .diary-date:hover {\r\n    background-color: rgb(101, 185, 219);\r\n  }\r\n\r\n  /* 모바일 화면용 스타일 */\r\n  @media (max-width: 600px) {\r\n    .main-container {\r\n      flex-direction: column;\r\n    }\r\n\r\n    .diary-section, .recent-diaries {\r\n      width: 100%;\r\n      flex: none;\r\n    }\r\n\r\n    .recent-diaries {\r\n      padding-left: 0;\r\n      border-left: none;\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}