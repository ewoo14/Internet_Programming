{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      name: '',\n      phone: '',\n      email: '',\n      nameForPassword: '',\n      phoneForPassword: '',\n      isNameValid: false,\n      isPhoneValid: false,\n      isEmailValid: false,\n      isNameForPasswordValid: false,\n      isPhoneForPasswordValid: false\n    };\n  },\n  computed: {\n    isIdFormValid() {\n      return this.isNameValid && this.isPhoneValid;\n    },\n    isPasswordFormValid() {\n      return this.isEmailValid && this.isNameForPasswordValid && this.isPhoneForPasswordValid;\n    }\n  },\n  mounted() {\n    this.validateName();\n    this.validatePhone();\n    this.validateEmail();\n    this.validateNameForPassword();\n    this.validatePhoneForPassword();\n  },\n  methods: {\n    validateName() {\n      this.isNameValid = this.name.length > 0;\n    },\n    // 전화번호 필드에 대한 유효성 검사\n    validatePhone() {\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n      this.isPhoneValid = phonePattern.test(this.phone);\n    },\n    // 전화번호 입력 형식 자동 변경\n    formatPhoneNumber(type, event) {\n      let cursorPosition = event.target.selectionStart; // 현재 커서 위치 저장\n      let oldValue = this[type];\n      let newValue = '';\n\n      // 숫자만 추출\n      let numbers = oldValue.replace(/[^\\d]/g, '');\n\n      // 숫자를 형식에 맞게 '-' 추가\n      for (let i = 0; i < numbers.length; i++) {\n        if (i === 3 || i === 7) newValue += '-';\n        newValue += numbers[i];\n      }\n\n      // 최대 길이 제한 (010-XXXX-XXXX)\n      newValue = newValue.slice(0, 13);\n\n      // 전화번호 업데이트\n      this[type] = newValue;\n\n      // 커서 위치 조정\n      let delta = newValue.length - oldValue.length;\n      if (oldValue[cursorPosition - 1] === '-' && delta > 0) {\n        cursorPosition += delta;\n      }\n\n      // 커서 위치 업데이트\n      this.$nextTick(() => {\n        event.target.setSelectionRange(cursorPosition, cursorPosition);\n      });\n\n      // 전화번호 형식 검증 메소드 호출\n      if (type === 'phone') {\n        this.validatePhone();\n      } else if (type === 'phoneForPassword') {\n        this.validatePhoneForPassword();\n      }\n    },\n    validateEmail() {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      this.isEmailValid = emailPattern.test(this.email);\n    },\n    validateNameForPassword() {\n      this.isNameForPasswordValid = this.nameForPassword.length > 0;\n    },\n    validatePhoneForPassword() {\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n      this.isPhoneForPasswordValid = phonePattern.test(this.phoneForPassword);\n    },\n    findAccount() {\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/findAccount`, {\n        name: this.name,\n        phone: this.phone\n      }).then(response => {\n        if (response.data.email) {\n          alert(`귀하의 계정은 ${response.data.email}입니다.`);\n          this.$router.push('/');\n        } else {\n          alert('해당 정보로 조회할 수 없습니다.');\n        }\n      }).catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 일치하는 정보가 없는 경우\n          alert('잘못된 정보입니다.');\n        } else {\n          // 기타 서버 오류\n          console.error('계정 찾기 오류:', error);\n          alert('오류가 발생했습니다.');\n        }\n      });\n    },\n    resetPassword() {\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/requestPasswordReset`, {\n        email: this.email,\n        name: this.nameForPassword,\n        phone: this.phoneForPassword\n      }).then(() => {\n        alert('비밀번호 재설정 링크가 이메일로 발송되었습니다.');\n      }).catch(error => {\n        // 오류 처리\n        console.error('비밀번호 재설정 요청 오류:', error);\n        alert('오류가 발생했습니다.');\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","name","phone","email","nameForPassword","phoneForPassword","isNameValid","isPhoneValid","isEmailValid","isNameForPasswordValid","isPhoneForPasswordValid","computed","isIdFormValid","isPasswordFormValid","mounted","validateName","validatePhone","validateEmail","validateNameForPassword","validatePhoneForPassword","methods","length","phonePattern","test","formatPhoneNumber","type","event","cursorPosition","target","selectionStart","oldValue","newValue","numbers","replace","i","slice","delta","$nextTick","setSelectionRange","emailPattern","findAccount","post","process","env","VUE_APP_BACKEND_URL","then","response","alert","$router","push","catch","error","status","console","resetPassword"],"sources":["C:\\Users\\ewoo2\\OneDrive\\문서\\GitHub\\공개SW프로젝트-Win\\Internet_Programming\\my-diary-app\\client\\src\\components\\FindAccount.vue"],"sourcesContent":["<template>\r\n    <div class=\"find-account-container\">\r\n      <div class=\"find-account-box\">\r\n        <!-- 아이디 찾기 섹션 -->\r\n        <h1 class=\"find-account-header\">아이디 찾기</h1>\r\n        <div class=\"inputs-container\">\r\n          <div class=\"fields-container\">\r\n            <div>\r\n              <input type=\"text\" placeholder=\"이름\" class=\"input-field\" v-model=\"name\" @input=\"validateName\" :class=\"{ 'is-invalid': !isNameValid, 'is-valid': isNameValid }\" />\r\n              <p v-if=\"!isNameValid\" class=\"warning-text\">이름을 입력해주세요.</p>\r\n            </div>\r\n            <div>\r\n              <input type=\"text\" placeholder=\"전화번호\" class=\"input-field\" v-model=\"phone\" @input=\"formatPhoneNumber('phone', $event); validatePhone()\" :class=\"{ 'is-invalid': !isPhoneValid, 'is-valid': isPhoneValid }\" required>\r\n              <p v-if=\"!isPhoneValid\" class=\"warning-text\">01x-xxxx-xxxx 형식으로 입력해주세요.</p>\r\n            </div>\r\n          </div>\r\n          <button class=\"find-account-btn\" @click=\"findAccount\" :disabled=\"!isIdFormValid\">찾기</button>\r\n        </div>\r\n  \r\n        <hr class=\"divider\" />\r\n  \r\n        <!-- 비밀번호 찾기 섹션 -->\r\n        <h1 class=\"find-account-header\">비밀번호 재설정</h1>\r\n        <div class=\"inputs-container\">\r\n          <div class=\"fields-container\">\r\n            <div>\r\n              <input type=\"email\" placeholder=\"이메일\" class=\"input-field\" v-model=\"email\" @input=\"validateEmail\" :class=\"{ 'is-invalid': !isEmailValid, 'is-valid': isEmailValid }\" />\r\n              <p v-if=\"!isEmailValid\" class=\"warning-text\">유효한 이메일 주소를 입력해주세요.</p>\r\n            </div>\r\n            <div>\r\n              <input type=\"text\" placeholder=\"이름\" class=\"input-field\" v-model=\"nameForPassword\" @input=\"validateNameForPassword\" :class=\"{ 'is-invalid': !isNameForPasswordValid, 'is-valid': isNameForPasswordValid }\" />\r\n              <p v-if=\"!isNameForPasswordValid\" class=\"warning-text\">이름을 입력해주세요.</p>\r\n            </div>\r\n            <div>\r\n              <div>\r\n                <input type=\"text\" placeholder=\"전화번호\" class=\"input-field\" v-model=\"phoneForPassword\" @input=\"formatPhoneNumber('phoneForPassword'); validatePhoneForPassword()\" :class=\"{ 'is-invalid': !isPhoneForPasswordValid, 'is-valid': isPhoneForPasswordValid }\" required>\r\n                <p v-if=\"!isPhoneForPasswordValid\" class=\"warning-text\">01x-xxxx-xxxx 형식으로 입력해주세요.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <button class=\"reset-password-btn\" @click=\"resetPassword\" :disabled=\"!isPasswordFormValid\">재설정</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\n  import axios from 'axios';\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        nameForPassword: '',\r\n        phoneForPassword: '',\r\n        isNameValid: false,\r\n        isPhoneValid: false,\r\n        isEmailValid: false,\r\n        isNameForPasswordValid: false,\r\n        isPhoneForPasswordValid: false\r\n      };\r\n    },\r\n    computed: {\r\n      isIdFormValid() {\r\n        return this.isNameValid && this.isPhoneValid;\r\n      },\r\n      isPasswordFormValid() {\r\n        return this.isEmailValid && this.isNameForPasswordValid && this.isPhoneForPasswordValid;\r\n      }\r\n    },\r\n    mounted() {\r\n      this.validateName();\r\n      this.validatePhone();\r\n      this.validateEmail();\r\n      this.validateNameForPassword();\r\n      this.validatePhoneForPassword();\r\n    },\r\n    methods: {\r\n      validateName() {\r\n        this.isNameValid = this.name.length > 0;\r\n      },\r\n      // 전화번호 필드에 대한 유효성 검사\r\n      validatePhone() {\r\n        const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\r\n        this.isPhoneValid = phonePattern.test(this.phone);\r\n      },\r\n      // 전화번호 입력 형식 자동 변경\r\n      formatPhoneNumber(type, event) {\r\n        let cursorPosition = event.target.selectionStart; // 현재 커서 위치 저장\r\n        let oldValue = this[type];\r\n        let newValue = '';\r\n\r\n        // 숫자만 추출\r\n        let numbers = oldValue.replace(/[^\\d]/g, '');\r\n\r\n        // 숫자를 형식에 맞게 '-' 추가\r\n        for (let i = 0; i < numbers.length; i++) {\r\n          if (i === 3 || i === 7) newValue += '-';\r\n          newValue += numbers[i];\r\n        }\r\n\r\n        // 최대 길이 제한 (010-XXXX-XXXX)\r\n        newValue = newValue.slice(0, 13);\r\n\r\n        // 전화번호 업데이트\r\n        this[type] = newValue;\r\n\r\n        // 커서 위치 조정\r\n        let delta = newValue.length - oldValue.length;\r\n        if (oldValue[cursorPosition - 1] === '-' && delta > 0) {\r\n          cursorPosition += delta;\r\n        }\r\n\r\n        // 커서 위치 업데이트\r\n        this.$nextTick(() => {\r\n          event.target.setSelectionRange(cursorPosition, cursorPosition);\r\n        });\r\n\r\n        // 전화번호 형식 검증 메소드 호출\r\n        if (type === 'phone') {\r\n          this.validatePhone();\r\n        } else if (type === 'phoneForPassword') {\r\n          this.validatePhoneForPassword();\r\n        }\r\n      },\r\n      validateEmail() {\r\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        this.isEmailValid = emailPattern.test(this.email);\r\n      },\r\n      validateNameForPassword() {\r\n        this.isNameForPasswordValid = this.nameForPassword.length > 0;\r\n      },\r\n      validatePhoneForPassword() {\r\n        const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\r\n        this.isPhoneForPasswordValid = phonePattern.test(this.phoneForPassword);\r\n      },\r\n      findAccount() {\r\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/findAccount`, {\r\n            name: this.name,\r\n            phone: this.phone\r\n        })\r\n        .then(response => {\r\n            if(response.data.email) {\r\n            alert(`귀하의 계정은 ${response.data.email}입니다.`);\r\n            this.$router.push('/');\r\n            } else {\r\n            alert('해당 정보로 조회할 수 없습니다.');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            if (error.response && error.response.status === 404) {\r\n            // 일치하는 정보가 없는 경우\r\n            alert('잘못된 정보입니다.');\r\n            } else {\r\n            // 기타 서버 오류\r\n            console.error('계정 찾기 오류:', error);\r\n            alert('오류가 발생했습니다.');\r\n            }\r\n        });\r\n      },\r\n      resetPassword() {\r\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/requestPasswordReset`, {\r\n          email: this.email,\r\n          name: this.nameForPassword,\r\n          phone: this.phoneForPassword\r\n        })\r\n        .then(() => {\r\n          alert('비밀번호 재설정 링크가 이메일로 발송되었습니다.');\r\n        })\r\n        .catch(error => {\r\n          // 오류 처리\r\n          console.error('비밀번호 재설정 요청 오류:', error);\r\n          alert('오류가 발생했습니다.');\r\n        });\r\n      }\r\n    }\r\n  };\r\n</script>\r\n  \r\n<style scoped>\r\n.find-account-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 80vh;\r\n}\r\n\r\n.find-account-box {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  width: 400px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.inputs-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.fields-container {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.find-account-header {\r\n  font-size: 1.5rem;\r\n  color: #333;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-field {\r\n  width: 250px;\r\n  padding: 10px;\r\n  margin-bottom: 7px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.input-field.is-valid {\r\n  border: 1px solid green;\r\n}\r\n\r\n.input-field.is-invalid {\r\n  border: 1px solid red;\r\n}\r\n\r\n.warning-text {\r\n  color: red;\r\n  font-size: 0.8rem;\r\n  margin-top: -5px;\r\n}\r\n\r\n.divider {\r\n  margin: 20px 0;\r\n  border-top: 1px solid #ddd;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}