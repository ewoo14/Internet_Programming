{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      name: '',\n      phone: '',\n      email: '',\n      nameForPassword: '',\n      phoneForPassword: '',\n      isNameValid: false,\n      isPhoneValid: false,\n      isEmailValid: false,\n      isNameForPasswordValid: false,\n      isPhoneForPasswordValid: false\n    };\n  },\n  computed: {\n    isIdFormValid() {\n      return this.isNameValid && this.isPhoneValid;\n    },\n    isPasswordFormValid() {\n      return this.isEmailValid && this.isNameForPasswordValid && this.isPhoneForPasswordValid;\n    }\n  },\n  mounted() {\n    this.validateName();\n    this.validatePhone();\n    this.validateEmail();\n    this.validateNameForPassword();\n    this.validatePhoneForPassword();\n  },\n  methods: {\n    validateName() {\n      this.isNameValid = this.name.length > 0;\n    },\n    // 전화번호 필드에 대한 유효성 검사\n    validatePhone() {\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n      this.isPhoneValid = phonePattern.test(this.userData.phone);\n    },\n    // 전화번호 입력 형식 자동 변경\n    formatPhoneNumber() {\n      let numbers = this.userData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n      let formatted = '';\n\n      // 숫자를 형식에 맞게 '-' 추가\n      for (let i = 0; i < numbers.length; i++) {\n        if (i === 3 || i === 7) formatted += '-'; // 특정 위치에 '-' 추가\n        formatted += numbers[i];\n      }\n\n      // 최대 길이 제한 (010-XXXX-XXXX)\n      this.userData.phone = formatted.slice(0, 13);\n\n      // 전화번호 형식 검증 메소드 호출\n      this.validatePhone();\n    },\n    validateEmail() {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      this.isEmailValid = emailPattern.test(this.email);\n    },\n    validateNameForPassword() {\n      this.isNameForPasswordValid = this.nameForPassword.length > 0;\n    },\n    validatePhoneForPassword() {\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n      this.isPhoneForPasswordValid = phonePattern.test(this.phoneForPassword);\n    },\n    findAccount() {\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/findAccount`, {\n        name: this.name,\n        phone: this.phone\n      }).then(response => {\n        if (response.data.email) {\n          alert(`귀하의 계정은 ${response.data.email}입니다.`);\n          this.$router.push('/');\n        } else {\n          alert('해당 정보로 조회할 수 없습니다.');\n        }\n      }).catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 일치하는 정보가 없는 경우\n          alert('잘못된 정보입니다.');\n        } else {\n          // 기타 서버 오류\n          console.error('계정 찾기 오류:', error);\n          alert('오류가 발생했습니다.');\n        }\n      });\n    },\n    resetPassword() {\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/requestPasswordReset`, {\n        email: this.email,\n        name: this.nameForPassword,\n        phone: this.phoneForPassword\n      }).then(() => {\n        alert('비밀번호 재설정 링크가 이메일로 발송되었습니다.');\n      }).catch(error => {\n        // 오류 처리\n        console.error('비밀번호 재설정 요청 오류:', error);\n        alert('오류가 발생했습니다.');\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","name","phone","email","nameForPassword","phoneForPassword","isNameValid","isPhoneValid","isEmailValid","isNameForPasswordValid","isPhoneForPasswordValid","computed","isIdFormValid","isPasswordFormValid","mounted","validateName","validatePhone","validateEmail","validateNameForPassword","validatePhoneForPassword","methods","length","phonePattern","test","userData","formatPhoneNumber","numbers","replace","formatted","i","slice","emailPattern","findAccount","post","process","env","VUE_APP_BACKEND_URL","then","response","alert","$router","push","catch","error","status","console","resetPassword"],"sources":["/Users/ewoo2/Library/CloudStorage/OneDrive-개인/문서/GitHub/공개SW프로젝트-Mac/Internet_Programming/my-diary-app/client/src/components/FindAccount.vue"],"sourcesContent":["<template>\n    <div class=\"find-account-container\">\n      <div class=\"find-account-box\">\n        <!-- 아이디 찾기 섹션 -->\n        <h1 class=\"find-account-header\">아이디 찾기</h1>\n        <div class=\"inputs-container\">\n          <div class=\"fields-container\">\n            <div>\n                <input type=\"text\" placeholder=\"이름\" class=\"input-field\" v-model=\"name\" @input=\"validateName\" :class=\"{ 'is-invalid': !isNameValid, 'is-valid': isNameValid }\" />\n                <p v-if=\"!isNameValid\" class=\"warning-text\">이름을 입력해주세요.</p>\n            </div>\n            <div>\n                <input type=\"text\" placeholder=\"전화번호\" class=\"input-field\" v-model=\"phone\" @input=\"validatePhone\" :class=\"{ 'is-invalid': !isPhoneValid, 'is-valid': isPhoneValid }\" />\n                <p v-if=\"!isPhoneValid\" class=\"warning-text\">01x-xxxx-xxxx 형식으로 입력해주세요.</p>\n            </div>\n          </div>\n          <button class=\"find-account-btn\" @click=\"findAccount\" :disabled=\"!isIdFormValid\">찾기</button>\n        </div>\n  \n        <hr class=\"divider\" />\n  \n        <!-- 비밀번호 찾기 섹션 -->\n        <h1 class=\"find-account-header\">비밀번호 재설정</h1>\n        <div class=\"inputs-container\">\n          <div class=\"fields-container\">\n            <div>\n                <input type=\"email\" placeholder=\"이메일\" class=\"input-field\" v-model=\"email\" @input=\"validateEmail\" :class=\"{ 'is-invalid': !isEmailValid, 'is-valid': isEmailValid }\" />\n                <p v-if=\"!isEmailValid\" class=\"warning-text\">유효한 이메일 주소를 입력해주세요.</p>\n            </div>\n            <div>\n                <input type=\"text\" placeholder=\"이름\" class=\"input-field\" v-model=\"nameForPassword\" @input=\"validateNameForPassword\" :class=\"{ 'is-invalid': !isNameForPasswordValid, 'is-valid': isNameForPasswordValid }\" />\n                <p v-if=\"!isNameForPasswordValid\" class=\"warning-text\">이름을 입력해주세요.</p>\n            </div>\n            <div>\n              <input type=\"text\" placeholder=\"전화번호\" class=\"input-field\" v-model=\"phone\" @input=\"validatePhone\" :class=\"{ 'is-invalid': !isPhoneValid, 'is-valid': isPhoneValid }\" required>\n                <p v-if=\"!isPhoneValid\" class=\"warning-text\">01x-xxxx-xxxx 형식으로 입력해주세요.</p>\n            </div>\n          </div>\n          <button class=\"reset-password-btn\" @click=\"resetPassword\" :disabled=\"!isPasswordFormValid\">재설정</button>\n        </div>\n      </div>\n    </div>\n</template>\n  \n<script>\n  import axios from 'axios';\n\n  export default {\n    data() {\n      return {\n        name: '',\n        phone: '',\n        email: '',\n        nameForPassword: '',\n        phoneForPassword: '',\n        isNameValid: false,\n        isPhoneValid: false,\n        isEmailValid: false,\n        isNameForPasswordValid: false,\n        isPhoneForPasswordValid: false\n      };\n    },\n    computed: {\n      isIdFormValid() {\n        return this.isNameValid && this.isPhoneValid;\n      },\n      isPasswordFormValid() {\n        return this.isEmailValid && this.isNameForPasswordValid && this.isPhoneForPasswordValid;\n      }\n    },\n    mounted() {\n      this.validateName();\n      this.validatePhone();\n      this.validateEmail();\n      this.validateNameForPassword();\n      this.validatePhoneForPassword();\n    },\n    methods: {\n      validateName() {\n        this.isNameValid = this.name.length > 0;\n      },\n      // 전화번호 필드에 대한 유효성 검사\n      validatePhone() {\n        const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n        this.isPhoneValid = phonePattern.test(this.userData.phone);\n      },\n      // 전화번호 입력 형식 자동 변경\n      formatPhoneNumber() {\n        let numbers = this.userData.phone.replace(/[^\\d]/g, ''); // 숫자만 추출\n        let formatted = '';\n\n        // 숫자를 형식에 맞게 '-' 추가\n        for (let i = 0; i < numbers.length; i++) {\n          if (i === 3 || i === 7) formatted += '-'; // 특정 위치에 '-' 추가\n          formatted += numbers[i];\n        }\n\n        // 최대 길이 제한 (010-XXXX-XXXX)\n        this.userData.phone = formatted.slice(0, 13);\n\n        // 전화번호 형식 검증 메소드 호출\n        this.validatePhone();\n      },\n      validateEmail() {\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        this.isEmailValid = emailPattern.test(this.email);\n      },\n      validateNameForPassword() {\n        this.isNameForPasswordValid = this.nameForPassword.length > 0;\n      },\n      validatePhoneForPassword() {\n        const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n        this.isPhoneForPasswordValid = phonePattern.test(this.phoneForPassword);\n      },\n      findAccount() {\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/findAccount`, {\n            name: this.name,\n            phone: this.phone\n        })\n        .then(response => {\n            if(response.data.email) {\n            alert(`귀하의 계정은 ${response.data.email}입니다.`);\n            this.$router.push('/');\n            } else {\n            alert('해당 정보로 조회할 수 없습니다.');\n            }\n        })\n        .catch(error => {\n            if (error.response && error.response.status === 404) {\n            // 일치하는 정보가 없는 경우\n            alert('잘못된 정보입니다.');\n            } else {\n            // 기타 서버 오류\n            console.error('계정 찾기 오류:', error);\n            alert('오류가 발생했습니다.');\n            }\n        });\n      },\n      resetPassword() {\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/requestPasswordReset`, {\n          email: this.email,\n          name: this.nameForPassword,\n          phone: this.phoneForPassword\n        })\n        .then(() => {\n          alert('비밀번호 재설정 링크가 이메일로 발송되었습니다.');\n        })\n        .catch(error => {\n          // 오류 처리\n          console.error('비밀번호 재설정 요청 오류:', error);\n          alert('오류가 발생했습니다.');\n        });\n      }\n    }\n  };\n</script>\n  \n<style scoped>\n.find-account-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 80vh;\n}\n\n.find-account-box {\n  background-color: white;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  width: 400px;\n  margin-bottom: 20px;\n}\n\n.inputs-container {\n  display: flex;\n  flex-direction: column;\n}\n\n.fields-container {\n  margin-bottom: 10px;\n}\n\n.find-account-header {\n  font-size: 1.5rem;\n  color: #333;\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.input-field {\n  width: 250px;\n  padding: 10px;\n  margin-bottom: 7px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n.input-field.is-valid {\n  border: 1px solid green;\n}\n\n.input-field.is-invalid {\n  border: 1px solid red;\n}\n\n.warning-text {\n  color: red;\n  font-size: 0.8rem;\n  margin-top: -5px;\n}\n\n.divider {\n  margin: 20px 0;\n  border-top: 1px solid #ddd;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}