{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport moment from 'moment';\nexport default {\n  data() {\n    return {\n      userName: '익명',\n      selectedDate: this.getCurrentDateInKST(),\n      diaryContent: null,\n      newDiaryContent: '',\n      recentDiaryDates: [] // 최근 작성한 일기 날짜 배열\n    };\n  },\n  computed: {\n    formattedDiaryContent() {\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\n    }\n  },\n  mounted() {\n    window.addEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  methods: {\n    getCurrentDateInKST() {\n      const now = new Date();\n      const utc = now.getTime() + now.getTimezoneOffset() * 60000; // UTC 시간\n      const kstTime = new Date(utc + 3600000 * 9); // UTC+9\n      return kstTime.toISOString().split('T')[0];\n    },\n    async logout() {\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        try {\n          await axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, {\n            userId\n          });\n          localStorage.removeItem('userId');\n          this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\n        } catch (error) {\n          console.error('로그아웃 실패:', error);\n        }\n      }\n    },\n    handleBeforeUnload() {\n      this.logout();\n    },\n    handleDateSelect(date) {\n      // 날짜를 선택하면 해당 날짜로 설정\n      this.selectedDate = date;\n      // 일기장 날짜를 선택한 날짜로 갱신\n      this.fetchDiary();\n    },\n    editDiary() {\n      // 수정 모드 활성화\n      this.newDiaryContent = this.diaryContent;\n      this.diaryContent = null;\n    },\n    fetchUserName() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/username`, {\n        params: {\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\n        }\n      }).then(response => {\n        this.userName = response.data.name; // 사용자 이름 설정\n      }).catch(error => {\n        console.error('Error fetching user name:', error);\n      });\n    },\n    fetchDiary() {\n      // 날짜 변경 시 기존 일기 내용 초기화\n      this.diaryContent = null;\n      this.newDiaryContent = '';\n      const userId = localStorage.getItem('userId');\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n        params: {\n          userId\n        }\n      }).then(response => {\n        // 해당 날짜의 일기 내용이 존재하는 경우\n        this.diaryContent = response.data.content;\n      }).catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 해당 날짜에 일기가 없는 경우\n          this.diaryContent = null;\n        } else {\n          console.error('Error fetching diary:', error);\n        }\n      });\n    },\n    saveDiary() {\n      const userId = localStorage.getItem('userId');\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/savediary`, {\n        user_id: userId,\n        date: this.selectedDate,\n        content: this.newDiaryContent\n      }).then(() => {\n        this.diaryContent = this.newDiaryContent;\n        this.newDiaryContent = '';\n        alert('일기가 저장되었습니다.');\n        this.fetchRecentDiaries();\n      }).catch(error => {\n        console.error('Error saving diary:', error);\n      });\n    },\n    deleteDiary() {\n      if (confirm('일기를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {\n        axios.delete(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\n          params: {\n            userId: localStorage.getItem('userId')\n          }\n        }).then(() => {\n          alert('일기가 삭제되었습니다.');\n          this.diaryContent = null; // 일기 내용 초기화\n          this.fetchRecentDiaries(); // 최근 일기 날짜 목록 갱신\n        }).catch(error => {\n          console.error('Error deleting diary:', error);\n          alert('일기 삭제에 실패했습니다.');\n        });\n      }\n    },\n    // 최근 작성된 일기 날짜 가져오기\n    fetchRecentDiaries() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/recent-diaries`, {\n        params: {\n          userId: localStorage.getItem('userId')\n        }\n      }).then(response => {\n        this.recentDiaryDates = response.data.dates; // 서버에서 반환된 날짜 배열\n      }).catch(error => {\n        console.error('Error fetching recent diaries:', error);\n      });\n    },\n    formatDate(date) {\n      return moment(date).format('YYYY-MM-DD');\n    },\n    selectDiaryDate(date) {\n      // 날짜 형식 변환\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      this.selectedDate = formattedDate;\n      this.fetchDiary();\n    },\n    isDateSelected(date) {\n      const formattedDate = moment(date).format('YYYY-MM-DD');\n      return formattedDate === this.selectedDate;\n    }\n  },\n  created() {\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\n    this.fetchRecentDiaries(); // 컴포넌트 생성 시 최근 일기 날짜 조회\n    axios.get(`${process.env.VUE_APP_BACKEND_URL}/current-kst-date`).then(response => {\n      this.selectedDate = response.data.date;\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    }).catch(error => {\n      console.error('Error fetching current KST date:', error);\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n    });\n\n    // 로컬 스토리지에서 사용자 ID 확인\n    const userId = localStorage.getItem('userId');\n\n    // 사용자 ID가 없으면 로그인 페이지로 리디렉션\n    if (!userId) {\n      alert(\"비정상적인 접근입니다.\");\n      this.$router.push('/userlogin');\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  }\n};","map":{"version":3,"names":["axios","moment","data","userName","selectedDate","getCurrentDateInKST","diaryContent","newDiaryContent","recentDiaryDates","computed","formattedDiaryContent","replace","mounted","window","addEventListener","handleBeforeUnload","methods","now","Date","utc","getTime","getTimezoneOffset","kstTime","toISOString","split","logout","userId","localStorage","getItem","post","process","env","VUE_APP_BACKEND_URL","removeItem","$router","push","error","console","handleDateSelect","date","fetchDiary","editDiary","fetchUserName","get","params","then","response","name","catch","content","status","saveDiary","user_id","alert","fetchRecentDiaries","deleteDiary","confirm","delete","dates","formatDate","format","selectDiaryDate","formattedDate","isDateSelected","created","beforeDestroy","removeEventListener"],"sources":["C:\\Users\\ewoo2\\OneDrive\\문서\\GitHub\\공개SW프로젝트-Win\\Internet_Programming\\my-diary-app\\client\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-page\">\r\n    <!-- 메인 헤더 -->\r\n    <div class=\"main-header\">\r\n      <!-- 사용자 정보, 마이페이지 및 로그아웃 링크 -->\r\n      <div class=\"user-info\">\r\n        {{ userName }}님 | \r\n        <router-link to=\"/mypage\">마이페이지</router-link> |\r\n        <a href=\"#\" @click=\"logout\">로그아웃</a>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 메인 컨테이너 -->\r\n    <div class=\"main-container\">\r\n      <div class=\"diary-section\">\r\n        <!-- 날짜 선택 -->\r\n        일자 : <input type=\"date\" v-model=\"selectedDate\" @change=\"fetchDiary\">\r\n        <hr>\r\n        <!-- 일기장 표시 -->\r\n        <div v-if=\"diaryContent\" class=\"diary-content\">\r\n          <div v-html=\"formattedDiaryContent\"></div>\r\n          <br><br>\r\n          <button @click=\"editDiary\">수정</button>\r\n          <button @click=\"deleteDiary\">삭제</button>\r\n        </div>\r\n        <div v-else class=\"empty-diary\">\r\n          <textarea v-model=\"newDiaryContent\" cols=\"50\" rows=\"20\"></textarea>\r\n          <br>\r\n          <button @click=\"saveDiary\">저장</button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 최근 작성한 일기 섹션 -->\r\n      <div class=\"recent-diaries\">\r\n        <h3>RECENT</h3>\r\n        <hr>\r\n        <div class=\"diary-list\">\r\n          <div v-for=\"date in recentDiaryDates\" :key=\"date\" class=\"diary-date\" :class=\"{ 'diary-date-selected': isDateSelected(date) }\" @click=\"selectDiaryDate(date)\">\r\n            {{ formatDate(date) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      userName: '익명',\r\n      selectedDate: this.getCurrentDateInKST(),\r\n      diaryContent: null,\r\n      newDiaryContent: '',\r\n      recentDiaryDates: [], // 최근 작성한 일기 날짜 배열\r\n    };\r\n  },\r\n  computed: {\r\n    formattedDiaryContent() {\r\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\r\n    }\r\n  },\r\n  mounted() {\r\n    window.addEventListener('beforeunload', this.handleBeforeUnload);\r\n  },  \r\n  methods: {\r\n    getCurrentDateInKST() {\r\n      const now = new Date();\r\n      const utc = now.getTime() + (now.getTimezoneOffset() * 60000); // UTC 시간\r\n      const kstTime = new Date(utc + (3600000 * 9)); // UTC+9\r\n      return kstTime.toISOString().split('T')[0];\r\n    },\r\n\r\n    async logout() {\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        try {\r\n          await axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, { userId });\r\n          localStorage.removeItem('userId');\r\n          this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\r\n        } catch (error) {\r\n          console.error('로그아웃 실패:', error);\r\n        }\r\n      }\r\n    },\r\n\r\n    handleBeforeUnload() {\r\n      this.logout();\r\n    },\r\n\r\n    handleDateSelect(date) {\r\n      // 날짜를 선택하면 해당 날짜로 설정\r\n      this.selectedDate = date;\r\n      // 일기장 날짜를 선택한 날짜로 갱신\r\n      this.fetchDiary();\r\n    },\r\n\r\n    editDiary() {\r\n      // 수정 모드 활성화\r\n      this.newDiaryContent = this.diaryContent;\r\n      this.diaryContent = null;\r\n    },\r\n\r\n    fetchUserName() {\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/username`, {\r\n          params: {\r\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\r\n          }\r\n      })\r\n      .then(response => {\r\n          this.userName = response.data.name; // 사용자 이름 설정\r\n      })\r\n      .catch(error => {\r\n          console.error('Error fetching user name:', error);\r\n      });\r\n    },\r\n\r\n    fetchDiary() {\r\n      // 날짜 변경 시 기존 일기 내용 초기화\r\n      this.diaryContent = null;\r\n      this.newDiaryContent = '';\r\n\r\n      const userId = localStorage.getItem('userId');\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\r\n        params: { userId }\r\n      })\r\n      .then(response => {\r\n        // 해당 날짜의 일기 내용이 존재하는 경우\r\n        this.diaryContent = response.data.content;\r\n      })\r\n      .catch(error => {\r\n        if (error.response && error.response.status === 404) {\r\n          // 해당 날짜에 일기가 없는 경우\r\n          this.diaryContent = null;\r\n        } else {\r\n          console.error('Error fetching diary:', error);\r\n        }\r\n      });\r\n    },\r\n\r\n    saveDiary() {\r\n      const userId = localStorage.getItem('userId');\r\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/savediary`, {\r\n        user_id: userId,\r\n        date: this.selectedDate,\r\n        content: this.newDiaryContent\r\n      })\r\n      .then(() => {\r\n        this.diaryContent = this.newDiaryContent;\r\n        this.newDiaryContent = '';\r\n        alert('일기가 저장되었습니다.');\r\n        this.fetchRecentDiaries();\r\n      })\r\n      .catch(error => {\r\n        console.error('Error saving diary:', error);\r\n      });\r\n    },\r\n\r\n    deleteDiary() {\r\n      if (confirm('일기를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {\r\n        axios.delete(`${process.env.VUE_APP_BACKEND_URL}/diary/${this.selectedDate}`, {\r\n          params: { userId: localStorage.getItem('userId') }\r\n        })\r\n        .then(() => {\r\n          alert('일기가 삭제되었습니다.');\r\n          this.diaryContent = null; // 일기 내용 초기화\r\n          this.fetchRecentDiaries(); // 최근 일기 날짜 목록 갱신\r\n        })\r\n        .catch(error => {\r\n          console.error('Error deleting diary:', error);\r\n          alert('일기 삭제에 실패했습니다.');\r\n        });\r\n      }\r\n    },\r\n\r\n    // 최근 작성된 일기 날짜 가져오기\r\n    fetchRecentDiaries() {\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/recent-diaries`, {\r\n        params: { userId: localStorage.getItem('userId') }\r\n      })\r\n      .then(response => {\r\n        this.recentDiaryDates = response.data.dates; // 서버에서 반환된 날짜 배열\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching recent diaries:', error);\r\n      });\r\n    },\r\n\r\n    formatDate(date) {\r\n      return moment(date).format('YYYY-MM-DD');\r\n    },\r\n\r\n    selectDiaryDate(date) {\r\n      // 날짜 형식 변환\r\n      const formattedDate = moment(date).format('YYYY-MM-DD');\r\n      this.selectedDate = formattedDate;\r\n      this.fetchDiary();\r\n    },\r\n\r\n    isDateSelected(date) {\r\n      const formattedDate = moment(date).format('YYYY-MM-DD');\r\n      return formattedDate === this.selectedDate;\r\n    },\r\n  },\r\n\r\n  created() {\r\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\r\n    this.fetchRecentDiaries(); // 컴포넌트 생성 시 최근 일기 날짜 조회\r\n    axios.get(`${process.env.VUE_APP_BACKEND_URL}/current-kst-date`)\r\n    .then(response => {\r\n      this.selectedDate = response.data.date;\r\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching current KST date:', error);\r\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\r\n    });\r\n\r\n    // 로컬 스토리지에서 사용자 ID 확인\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    // 사용자 ID가 없으면 로그인 페이지로 리디렉션\r\n    if (!userId) {\r\n      alert(\"비정상적인 접근입니다.\");\r\n      this.$router.push('/userlogin');\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\r\n  }\r\n};\r\n</script>\r\n  \r\n<style>\r\n  .main-page {\r\n    padding: 20px;\r\n    max-width: 600px; /* 메인 페이지 최대 너비 조정 */\r\n    margin: auto;\r\n  }\r\n\r\n  .main-header {\r\n    display: flex;\r\n    justify-content: flex-end; /* 우측 정렬 */\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .user-info {\r\n    margin-right: 0; /* 우측 여백 제거 */\r\n  }\r\n\r\n  .main-container {\r\n    display: flex;\r\n    margin-top: 20px;\r\n    padding: 20px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .diary-section {\r\n    flex: 80%; /* 메인 컨테이너 좌측 85% 너비 할당 */\r\n  }\r\n\r\n  .empty-diary {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    padding: 10px;\r\n  }\r\n\r\n  .recent-diaries {\r\n    flex: 20%; /* 메인 컨테이너 우측 15% 너비 할당 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border-left: 1px solid #ddd;\r\n    height: 380px;\r\n    overflow-y: auto; /* 내용이 넘칠 경우 스크롤 */\r\n  }\r\n\r\n  .recent-diaries h3 {\r\n    margin-top: 0px;\r\n    margin-bottom: 1px;\r\n  }\r\n\r\n  .recent-diaries hr {\r\n    width: 100%;\r\n    border-top: 1px solid gray;\r\n  }\r\n\r\n  .diary-date {\r\n    cursor: pointer;\r\n    text-align: center;\r\n    padding: 5px;\r\n    border: 1px solid #eee;\r\n    border-radius: 20px;\r\n    margin-bottom: 5px;\r\n    word-break: break-all;\r\n    width: auto;\r\n    background-color: rgb(198, 229, 240);\r\n    font-size: 13px;\r\n  }\r\n\r\n  .diary-date-selected {\r\n    background-color: rgb(101, 185, 219);\r\n  }\r\n\r\n  .diary-date:hover {\r\n    background-color: rgb(101, 185, 219);\r\n  }\r\n\r\n  button {\r\n    margin: 5px 5px;\r\n  }\r\n\r\n  /* 모바일 화면용 스타일 */\r\n  @media (max-width: 600px) {\r\n    .main-container {\r\n      flex-direction: column;\r\n    }\r\n\r\n    .diary-section, .recent-diaries {\r\n      width: 100%;\r\n      flex: none;\r\n      padding-left: 0;\r\n      padding-right: 0;\r\n    }\r\n\r\n    .empty-diary textarea {\r\n      width: 100%;\r\n      box-sizing: border-box;\r\n      padding: 10px;\r\n    }\r\n\r\n    .recent-diaries {\r\n      margin-top: 20px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      border: 1px solid;\r\n    }\r\n\r\n    .recent-diaries h3 {\r\n      margin-top: 10px;\r\n      margin-bottom: 0px;\r\n    }\r\n\r\n    .recent-diaries hr {\r\n      width: 100%;\r\n      border-top: 1px solid gray;\r\n    }\r\n\r\n    .diary-date {\r\n      cursor: pointer;\r\n      text-align: center;\r\n      padding: 5px;\r\n      border: 1px solid #eee;\r\n      border-radius: 20px;\r\n      margin-bottom: 5px;\r\n      word-break: break-all;\r\n      width: auto;\r\n      background-color: rgb(198, 229, 240);\r\n      font-size: 13px;\r\n    }\r\n\r\n    button {\r\n      margin: 5px 5px;\r\n    }\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}