{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      newPassword: '',\n      confirmPassword: '',\n      isNewPasswordValid: false,\n      isConfirmPasswordValid: false,\n      userId: this.$route.query.userId,\n      remainingTime: 600,\n      // 초단위 (10분)\n      timer: null\n    };\n  },\n  created() {\n    const token = this.$route.query.token;\n    if (token) {\n      // 서버에 토큰 유효성 확인 요청\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/verify-reset-token?token=${token}`).then(response => {\n        // 서버로부터 userId 받아 처리\n        this.userId = response.data.userId;\n      }).catch(() => {\n        // 토큰 만료 또는 유효하지 않은 경우\n        alert('링크가 만료되었거나 유효하지 않습니다.');\n        this.$router.push('/');\n      });\n    } else {\n      // 마이페이지에서 직접 접근한 경우\n      // localStorage 등에서 userId 가져오기\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        alert(\"비정상적인 접근입니다.\");\n        this.$router.push('/userlogin');\n      }\n    }\n  },\n  computed: {\n    isFormValid() {\n      return this.isNewPasswordValid && this.isConfirmPasswordValid;\n    }\n  },\n  methods: {\n    validateNewPassword() {\n      this.isNewPasswordValid = this.newPassword.length > 0;\n    },\n    validateConfirmPassword() {\n      this.isConfirmPasswordValid = this.newPassword === this.confirmPassword;\n    },\n    updatePassword() {\n      if (!this.isNewPasswordValid || !this.isConfirmPasswordValid) {\n        alert(\"비밀번호 유효성 검사를 통과하지 못했습니다.\");\n        return;\n      }\n      if (!this.userId) {\n        console.error(\"userId is undefined, cannot update password.\");\n        return;\n      }\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/updatePassword`, {\n        userId: this.userId,\n        newPassword: this.newPassword\n      }).then(() => {\n        alert(\"비밀번호가 성공적으로 변경되었습니다.\");\n        this.$router.push('/userlogin');\n      }).catch(error => {\n        console.error('비밀번호 변경 오류:', error);\n        alert('비밀번호 변경 중 오류가 발생했습니다.');\n      });\n    },\n    resetTimer() {\n      this.remainingTime = 600; // 타이머를 10분으로 재설정\n    },\n    updateTimer() {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n      } else {\n        this.logout(); // 타이머가 0이 되면 로그아웃 실행\n      }\n    },\n    logout() {\n      clearInterval(this.timerId); // 타이머 초기화\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, {\n          userId\n        }).then(() => {\n          localStorage.removeItem('userId');\n          this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\n        }).catch(error => {\n          console.error('로그아웃 실패:', error);\n        });\n      }\n    },\n    handleBeforeUnload() {\n      this.logout();\n    },\n    handleDateSelect(date) {\n      // 날짜를 선택하면 해당 날짜로 설정\n      this.selectedDate = date;\n      // 일기장 날짜를 선택한 날짜로 갱신\n      this.fetchDiary();\n    }\n  },\n  mounted() {\n    this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\n\n    // 사용자 활동 감지\n    window.addEventListener('mousemove', this.resetTimer);\n    window.addEventListener('keydown', this.resetTimer);\n  },\n  beforeUnmount() {\n    clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\n    window.removeEventListener('mousemove', this.resetTimer);\n    window.removeEventListener('keydown', this.resetTimer);\n  }\n};","map":{"version":3,"names":["axios","data","newPassword","confirmPassword","isNewPasswordValid","isConfirmPasswordValid","userId","$route","query","remainingTime","timer","created","token","get","process","env","VUE_APP_BACKEND_URL","then","response","catch","alert","$router","push","localStorage","getItem","computed","isFormValid","methods","validateNewPassword","length","validateConfirmPassword","updatePassword","console","error","post","resetTimer","updateTimer","logout","clearInterval","timerId","removeItem","handleBeforeUnload","handleDateSelect","date","selectedDate","fetchDiary","mounted","setInterval","window","addEventListener","beforeUnmount","removeEventListener"],"sources":["/Users/ewoo2/Library/CloudStorage/OneDrive-개인/문서/GitHub/공개SW프로젝트-Mac/Internet_Programming/my-diary-app/client/src/components/ResetPassword.vue"],"sourcesContent":["<template>\n  <div class=\"reset-password-container\">\n    <div class=\"timer\">자동 로그아웃: {{ remainingTime }}초</div>\n    <h1 class=\"reset-password-header\">비밀번호 재설정</h1>\n    <div class=\"inputs-container\">\n      <div>\n        <input type=\"password\" placeholder=\"새 비밀번호\" class=\"input-field\" v-model=\"newPassword\" @input=\"validateNewPassword\" :class=\"{ 'is-invalid': !isNewPasswordValid, 'is-valid': isNewPasswordValid }\" />\n        <p v-if=\"!isNewPasswordValid\" class=\"warning-text\">비밀번호를 입력해주세요.</p>\n      </div>\n      <div>\n        <input type=\"password\" placeholder=\"새 비밀번호 확인\" class=\"input-field\" v-model=\"confirmPassword\" @input=\"validateConfirmPassword\" :class=\"{ 'is-invalid': !isConfirmPasswordValid, 'is-valid': isConfirmPasswordValid }\" />\n        <p v-if=\"!isConfirmPasswordValid\" class=\"warning-text\">같은 비밀번호를 입력해주세요.</p>\n      </div>\n      <button class=\"reset-password-btn\" @click=\"updatePassword\" :disabled=\"!isFormValid\">재설정</button>\n    </div>\n  </div>\n</template>\n  \n<script>\n  import axios from 'axios';\n\n  export default {\n    data() {\n      return {\n        newPassword: '',\n        confirmPassword: '',\n        isNewPasswordValid: false,\n        isConfirmPasswordValid: false,\n        userId: this.$route.query.userId,\n        remainingTime: 600, // 초단위 (10분)\n        timer: null\n      };\n    },\n    created() {\n      const token = this.$route.query.token;\n\n      if (token) {\n        // 서버에 토큰 유효성 확인 요청\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/verify-reset-token?token=${token}`)\n          .then(response => {\n            // 서버로부터 userId 받아 처리\n            this.userId = response.data.userId;\n          })\n          .catch(() => {\n            // 토큰 만료 또는 유효하지 않은 경우\n            alert('링크가 만료되었거나 유효하지 않습니다.');\n            this.$router.push('/');\n          });\n      } else {\n        // 마이페이지에서 직접 접근한 경우\n        // localStorage 등에서 userId 가져오기\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n          alert(\"비정상적인 접근입니다.\");\n          this.$router.push('/userlogin');\n        }\n      }\n    },\n    computed: {\n      isFormValid() {\n        return this.isNewPasswordValid && this.isConfirmPasswordValid;\n      }\n    },\n\n    methods: {\n      validateNewPassword() {\n        this.isNewPasswordValid = this.newPassword.length > 0;\n      },\n      validateConfirmPassword() {\n        this.isConfirmPasswordValid = this.newPassword === this.confirmPassword;\n      },\n      updatePassword() {\n        if (!this.isNewPasswordValid || !this.isConfirmPasswordValid) {\n            alert(\"비밀번호 유효성 검사를 통과하지 못했습니다.\");\n            return;\n        }\n        if (!this.userId) {\n          console.error(\"userId is undefined, cannot update password.\");\n          return;\n        }\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/updatePassword`, {\n            userId: this.userId,\n            newPassword: this.newPassword\n        })\n        .then(() => {\n            alert(\"비밀번호가 성공적으로 변경되었습니다.\");\n            this.$router.push('/userlogin');\n        })\n        .catch(error => {\n            console.error('비밀번호 변경 오류:', error);\n            alert('비밀번호 변경 중 오류가 발생했습니다.');\n        });\n      },\n      resetTimer() {\n        this.remainingTime = 600; // 타이머를 10분으로 재설정\n      },\n\n      updateTimer() {\n        if (this.remainingTime > 0) {\n          this.remainingTime--;\n        } else {\n          this.logout(); // 타이머가 0이 되면 로그아웃 실행\n        }\n      },\n      \n      logout() {\n        clearInterval(this.timerId); // 타이머 초기화\n        const userId = localStorage.getItem('userId');\n        if (userId) {\n          axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, { userId })\n            .then(() => {\n              localStorage.removeItem('userId');\n              this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\n            })\n            .catch(error => {\n              console.error('로그아웃 실패:', error);\n            });\n        }\n      },\n\n      handleBeforeUnload() {\n        this.logout();\n      },\n\n      handleDateSelect(date) {\n        // 날짜를 선택하면 해당 날짜로 설정\n        this.selectedDate = date;\n        // 일기장 날짜를 선택한 날짜로 갱신\n        this.fetchDiary();\n      },\n    },\n    mounted() {\n      this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\n\n      // 사용자 활동 감지\n      window.addEventListener('mousemove', this.resetTimer);\n      window.addEventListener('keydown', this.resetTimer);\n    }, \n    beforeUnmount() {\n      clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\n      window.removeEventListener('mousemove', this.resetTimer);\n      window.removeEventListener('keydown', this.resetTimer);\n    }\n  };\n</script>\n  \n<style scoped>\n  .reset-password-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    width: 400px;\n    margin: auto;\n  }\n  \n  .reset-password-header {\n    font-size: 1.5rem;\n    color: #333;\n    margin-bottom: 20px;\n  }\n  \n  .inputs-container {\n    width: 100%;\n  }\n  \n  .input-field {\n    width: 250px;\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n  }\n  \n  button {\n    width: 100%;\n    padding: 10px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n  \n  .input-field.is-valid {\n    border: 1px solid green;\n  }\n  \n  .input-field.is-invalid {\n    border: 1px solid red;\n  }\n  \n  .warning-text {\n    color: red;\n    font-size: 0.8rem;\n    margin-top: -5px;\n  }\n</style>  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}