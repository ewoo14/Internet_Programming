{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4383ec0a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"reset-password-container\"\n};\nconst _hoisted_2 = {\n  class: \"timer\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"reset-password-header\"\n}, \"비밀번호 재설정\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"inputs-container\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"warning-text\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"warning-text\"\n};\nconst _hoisted_7 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, \"자동 로그아웃: \" + _toDisplayString($data.remainingTime) + \"초\", 1 /* TEXT */), _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    placeholder: \"새 비밀번호\",\n    class: _normalizeClass([\"input-field\", {\n      'is-invalid': !$data.isNewPasswordValid,\n      'is-valid': $data.isNewPasswordValid\n    }]),\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPassword = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.validateNewPassword && $options.validateNewPassword(...args))\n  }, null, 34 /* CLASS, NEED_HYDRATION */), [[_vModelText, $data.newPassword]]), !$data.isNewPasswordValid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \"비밀번호를 입력해주세요.\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    placeholder: \"새 비밀번호 확인\",\n    class: _normalizeClass([\"input-field\", {\n      'is-invalid': !$data.isConfirmPasswordValid,\n      'is-valid': $data.isConfirmPasswordValid\n    }]),\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.confirmPassword = $event),\n    onInput: _cache[3] || (_cache[3] = (...args) => $options.validateConfirmPassword && $options.validateConfirmPassword(...args))\n  }, null, 34 /* CLASS, NEED_HYDRATION */), [[_vModelText, $data.confirmPassword]]), !$data.isConfirmPasswordValid ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \"같은 비밀번호를 입력해주세요.\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"button\", {\n    class: \"reset-password-btn\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.updatePassword && $options.updatePassword(...args)),\n    disabled: !$options.isFormValid\n  }, \"재설정\", 8 /* PROPS */, _hoisted_7)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$data","remainingTime","_hoisted_3","_hoisted_4","type","placeholder","_normalizeClass","isNewPasswordValid","_cache","$event","newPassword","onInput","args","$options","validateNewPassword","_hoisted_5","_createCommentVNode","isConfirmPasswordValid","confirmPassword","validateConfirmPassword","_hoisted_6","onClick","updatePassword","disabled","isFormValid","_hoisted_7"],"sources":["/Users/ewoo2/Library/CloudStorage/OneDrive-개인/문서/GitHub/공개SW프로젝트-Mac/Internet_Programming/my-diary-app/client/src/components/ResetPassword.vue"],"sourcesContent":["<template>\n  <div class=\"reset-password-container\">\n    <div class=\"timer\">자동 로그아웃: {{ remainingTime }}초</div>\n    <h1 class=\"reset-password-header\">비밀번호 재설정</h1>\n    <div class=\"inputs-container\">\n      <div>\n        <input type=\"password\" placeholder=\"새 비밀번호\" class=\"input-field\" v-model=\"newPassword\" @input=\"validateNewPassword\" :class=\"{ 'is-invalid': !isNewPasswordValid, 'is-valid': isNewPasswordValid }\" />\n        <p v-if=\"!isNewPasswordValid\" class=\"warning-text\">비밀번호를 입력해주세요.</p>\n      </div>\n      <div>\n        <input type=\"password\" placeholder=\"새 비밀번호 확인\" class=\"input-field\" v-model=\"confirmPassword\" @input=\"validateConfirmPassword\" :class=\"{ 'is-invalid': !isConfirmPasswordValid, 'is-valid': isConfirmPasswordValid }\" />\n        <p v-if=\"!isConfirmPasswordValid\" class=\"warning-text\">같은 비밀번호를 입력해주세요.</p>\n      </div>\n      <button class=\"reset-password-btn\" @click=\"updatePassword\" :disabled=\"!isFormValid\">재설정</button>\n    </div>\n  </div>\n</template>\n  \n<script>\n  import axios from 'axios';\n\n  export default {\n    data() {\n      return {\n        newPassword: '',\n        confirmPassword: '',\n        isNewPasswordValid: false,\n        isConfirmPasswordValid: false,\n        userId: this.$route.query.userId,\n        remainingTime: 600, // 초단위 (10분)\n        timer: null\n      };\n    },\n    created() {\n      const token = this.$route.query.token;\n\n      if (token) {\n        // 서버에 토큰 유효성 확인 요청\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/verify-reset-token?token=${token}`)\n          .then(response => {\n            // 서버로부터 userId 받아 처리\n            this.userId = response.data.userId;\n          })\n          .catch(() => {\n            // 토큰 만료 또는 유효하지 않은 경우\n            alert('링크가 만료되었거나 유효하지 않습니다.');\n            this.$router.push('/');\n          });\n      } else {\n        // 마이페이지에서 직접 접근한 경우\n        // localStorage 등에서 userId 가져오기\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n          alert(\"비정상적인 접근입니다.\");\n          this.$router.push('/userlogin');\n        }\n      }\n    },\n    computed: {\n      isFormValid() {\n        return this.isNewPasswordValid && this.isConfirmPasswordValid;\n      }\n    },\n\n    methods: {\n      validateNewPassword() {\n        this.isNewPasswordValid = this.newPassword.length > 0;\n      },\n      validateConfirmPassword() {\n        this.isConfirmPasswordValid = this.newPassword === this.confirmPassword;\n      },\n      updatePassword() {\n        if (!this.isNewPasswordValid || !this.isConfirmPasswordValid) {\n            alert(\"비밀번호 유효성 검사를 통과하지 못했습니다.\");\n            return;\n        }\n        if (!this.userId) {\n          console.error(\"userId is undefined, cannot update password.\");\n          return;\n        }\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/updatePassword`, {\n            userId: this.userId,\n            newPassword: this.newPassword\n        })\n        .then(() => {\n            alert(\"비밀번호가 성공적으로 변경되었습니다.\");\n            this.$router.push('/userlogin');\n        })\n        .catch(error => {\n            console.error('비밀번호 변경 오류:', error);\n            alert('비밀번호 변경 중 오류가 발생했습니다.');\n        });\n      },\n      resetTimer() {\n        this.remainingTime = 600; // 타이머를 10분으로 재설정\n      },\n\n      updateTimer() {\n        if (this.remainingTime > 0) {\n          this.remainingTime--;\n        } else {\n          this.logout(); // 타이머가 0이 되면 로그아웃 실행\n        }\n      },\n      \n      logout() {\n        clearInterval(this.timerId); // 타이머 초기화\n        const userId = localStorage.getItem('userId');\n        if (userId) {\n          axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, { userId })\n            .then(() => {\n              localStorage.removeItem('userId');\n              this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\n            })\n            .catch(error => {\n              console.error('로그아웃 실패:', error);\n            });\n        }\n      },\n\n      handleBeforeUnload() {\n        this.logout();\n      },\n\n      handleDateSelect(date) {\n        // 날짜를 선택하면 해당 날짜로 설정\n        this.selectedDate = date;\n        // 일기장 날짜를 선택한 날짜로 갱신\n        this.fetchDiary();\n      },\n    },\n    mounted() {\n      this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\n\n      // 사용자 활동 감지\n      window.addEventListener('mousemove', this.resetTimer);\n      window.addEventListener('keydown', this.resetTimer);\n    }, \n    beforeUnmount() {\n      clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\n      window.removeEventListener('mousemove', this.resetTimer);\n      window.removeEventListener('keydown', this.resetTimer);\n    }\n  };\n</script>\n  \n<style scoped>\n  .reset-password-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    width: 400px;\n    margin: auto;\n  }\n  \n  .reset-password-header {\n    font-size: 1.5rem;\n    color: #333;\n    margin-bottom: 20px;\n  }\n  \n  .inputs-container {\n    width: 100%;\n  }\n  \n  .input-field {\n    width: 250px;\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n  }\n  \n  button {\n    width: 100%;\n    padding: 10px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n  \n  .input-field.is-valid {\n    border: 1px solid green;\n  }\n  \n  .input-field.is-invalid {\n    border: 1px solid red;\n  }\n  \n  .warning-text {\n    color: red;\n    font-size: 0.8rem;\n    margin-top: -5px;\n  }\n</style>  "],"mappings":";;;EACOA,KAAK,EAAC;AAA0B;;EAC9BA,KAAK,EAAC;AAAO;gEAClBC,mBAAA,CAA+C;EAA3CD,KAAK,EAAC;AAAuB,GAAC,UAAQ;;EACrCA,KAAK,EAAC;AAAkB;;EAJjCE,GAAA;EAOsCF,KAAK,EAAC;;;EAP5CE,GAAA;EAW0CF,KAAK,EAAC;;mBAXhD;;uBACEG,mBAAA,CAcM,OAdNC,UAcM,GAbJH,mBAAA,CAAsD,OAAtDI,UAAsD,EAAnC,WAAS,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,aAAa,IAAG,GAAC,iBAChDC,UAA+C,EAC/CR,mBAAA,CAUM,OAVNS,UAUM,GATJT,mBAAA,CAGM,c,gBAFJA,mBAAA,CAAoM;IAA7LU,IAAI,EAAC,UAAU;IAACC,WAAW,EAAC,QAAQ;IAACZ,KAAK,EANzDa,eAAA,EAM0D,aAAa;MAAA,eAA6EN,KAAA,CAAAO,kBAAkB;MAAA,YAAcP,KAAA,CAAAO;IAAkB;IANtM,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMiFT,KAAA,CAAAU,WAAW,GAAAD,MAAA;IAAGE,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEC,QAAA,CAAAC,mBAAA,IAAAD,QAAA,CAAAC,mBAAA,IAAAF,IAAA,CAAmB;2DAAxCZ,KAAA,CAAAU,WAAW,E,IAC1EV,KAAA,CAAAO,kBAAkB,I,cAA5BX,mBAAA,CAAoE,KAApEmB,UAAoE,EAAjB,eAAa,KAPxEC,mBAAA,e,GASMtB,mBAAA,CAGM,c,gBAFJA,mBAAA,CAAuN;IAAhNU,IAAI,EAAC,UAAU;IAACC,WAAW,EAAC,WAAW;IAACZ,KAAK,EAV5Da,eAAA,EAU6D,aAAa;MAAA,eAAqFN,KAAA,CAAAiB,sBAAsB;MAAA,YAAcjB,KAAA,CAAAiB;IAAsB;IAVzN,uBAAAT,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAUoFT,KAAA,CAAAkB,eAAe,GAAAT,MAAA;IAAGE,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEC,QAAA,CAAAM,uBAAA,IAAAN,QAAA,CAAAM,uBAAA,IAAAP,IAAA,CAAuB;2DAAhDZ,KAAA,CAAAkB,eAAe,E,IACjFlB,KAAA,CAAAiB,sBAAsB,I,cAAhCrB,mBAAA,CAA2E,KAA3EwB,UAA2E,EAApB,kBAAgB,KAX/EJ,mBAAA,e,GAaMtB,mBAAA,CAAgG;IAAxFD,KAAK,EAAC,oBAAoB;IAAE4B,OAAK,EAAAb,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEC,QAAA,CAAAS,cAAA,IAAAT,QAAA,CAAAS,cAAA,IAAAV,IAAA,CAAc;IAAGW,QAAQ,GAAGV,QAAA,CAAAW;KAAa,KAAG,iBAb7FC,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}