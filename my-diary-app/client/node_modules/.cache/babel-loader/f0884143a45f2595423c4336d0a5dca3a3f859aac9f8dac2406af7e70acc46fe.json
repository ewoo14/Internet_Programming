{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userName: '익명',\n      selectedDate: new Date().toISOString().substr(0, 10),\n      diaryContent: null,\n      newDiaryContent: ''\n    };\n  },\n  computed: {\n    formattedDiaryContent() {\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\n    }\n  },\n  methods: {\n    logout() {\n      // 로컬 스토리지에서 사용자 ID 삭제\n      localStorage.removeItem('userId');\n      // 로그인 페이지로 리디렉션\n      this.$router.push('/userlogin');\n    },\n    handleDateSelect(date) {\n      console.log('Selected date:', date);\n      this.$router.push({\n        name: 'WriteDiary',\n        query: {\n          date: date.toISOString()\n        }\n      });\n    },\n    editDiary() {\n      // 수정 모드 활성화\n      this.newDiaryContent = this.diaryContent;\n      this.diaryContent = null;\n    },\n    fetchUserName() {\n      axios.get('http://localhost:3000/username', {\n        params: {\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\n        }\n      }).then(response => {\n        this.userName = response.data.name; // 사용자 이름 설정\n      }).catch(error => {\n        console.error('Error fetching user name:', error);\n      });\n    },\n    fetchDiary() {\n      // 날짜 변경 시 기존 일기 내용 초기화\n      this.diaryContent = null;\n      this.newDiaryContent = '';\n      const userId = localStorage.getItem('userId');\n      axios.get(`http://localhost:3000/diary/${this.selectedDate}`, {\n        params: {\n          userId\n        }\n      }).then(response => {\n        // 해당 날짜의 일기 내용이 존재하는 경우\n        this.diaryContent = response.data.content;\n      }).catch(error => {\n        if (error.response && error.response.status === 404) {\n          // 해당 날짜에 일기가 없는 경우\n          this.diaryContent = null;\n        } else {\n          console.error('Error fetching diary:', error);\n        }\n      });\n    },\n    saveDiary() {\n      const userId = localStorage.getItem('userId');\n      axios.post('http://localhost:3000/savediary', {\n        user_id: userId,\n        date: this.selectedDate,\n        content: this.newDiaryContent\n      }).then(() => {\n        this.diaryContent = this.newDiaryContent;\n        this.newDiaryContent = '';\n        alert('일기가 저장되었습니다.');\n      }).catch(error => {\n        console.error('Error saving diary:', error);\n      });\n    }\n  },\n  created() {\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\n    this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\n  }\n};","map":{"version":3,"names":["axios","data","userName","selectedDate","Date","toISOString","substr","diaryContent","newDiaryContent","computed","formattedDiaryContent","replace","methods","logout","localStorage","removeItem","$router","push","handleDateSelect","date","console","log","name","query","editDiary","fetchUserName","get","params","userId","getItem","then","response","catch","error","fetchDiary","content","status","saveDiary","post","user_id","alert","created"],"sources":["C:\\Users\\ewoo2\\OneDrive\\문서\\GitHub\\공개SW프로젝트-Win\\Internet_Programming\\my-diary-app\\client\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-page\">\r\n    <!-- 사용자 정보, 마이페이지 및 로그아웃 링크 -->\r\n    <div class=\"user-info\">\r\n      {{ userName }}님 | \r\n      <router-link to=\"/mypage\">마이페이지</router-link> |\r\n      <a href=\"#\" @click=\"logout\">로그아웃</a>\r\n    </div>\r\n\r\n    <!-- 메인 컨테이너 -->\r\n    <div class=\"main-container\">\r\n      <!-- 날짜 선택 -->\r\n      일자 : <input type=\"date\" v-model=\"selectedDate\" @change=\"fetchDiary\">\r\n      <hr>\r\n      <!-- 일기장 표시 -->\r\n      <div v-if=\"diaryContent\" class=\"diary-content\">\r\n        <div v-html=\"formattedDiaryContent\"></div>\r\n        <br><br>\r\n        <button @click=\"editDiary\">수정</button>\r\n      </div>\r\n      <div v-else class=\"empty-diary\">\r\n        <textarea v-model=\"newDiaryContent\" cols=\"50\" rows=\"20\"></textarea>\r\n        <br>\r\n        <button @click=\"saveDiary\">저장</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      userName: '익명',\r\n      selectedDate: new Date().toISOString().substr(0, 10),\r\n      diaryContent: null,\r\n      newDiaryContent: '',\r\n    };\r\n  },\r\n  computed: {\r\n    formattedDiaryContent() {\r\n      return this.diaryContent.replace(/\\n/g, '<br>'); // 개행 문자를 <br> 태그로 변환\r\n    }\r\n  },\r\n  methods: {\r\n    logout() {\r\n      // 로컬 스토리지에서 사용자 ID 삭제\r\n      localStorage.removeItem('userId');\r\n      // 로그인 페이지로 리디렉션\r\n      this.$router.push('/userlogin');\r\n    },\r\n\r\n    handleDateSelect(date) {\r\n      console.log('Selected date:', date);\r\n      this.$router.push({ name: 'WriteDiary', query: { date: date.toISOString() } });\r\n    },\r\n\r\n    editDiary() {\r\n      // 수정 모드 활성화\r\n      this.newDiaryContent = this.diaryContent;\r\n      this.diaryContent = null;\r\n    },\r\n\r\n    fetchUserName() {\r\n      axios.get('http://localhost:3000/username', {\r\n          params: {\r\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\r\n          }\r\n      })\r\n      .then(response => {\r\n          this.userName = response.data.name; // 사용자 이름 설정\r\n      })\r\n      .catch(error => {\r\n          console.error('Error fetching user name:', error);\r\n      });\r\n    },\r\n\r\n    fetchDiary() {\r\n      // 날짜 변경 시 기존 일기 내용 초기화\r\n      this.diaryContent = null;\r\n      this.newDiaryContent = '';\r\n\r\n      const userId = localStorage.getItem('userId');\r\n      axios.get(`http://localhost:3000/diary/${this.selectedDate}`, {\r\n        params: { userId }\r\n      })\r\n      .then(response => {\r\n        // 해당 날짜의 일기 내용이 존재하는 경우\r\n        this.diaryContent = response.data.content;\r\n      })\r\n      .catch(error => {\r\n        if (error.response && error.response.status === 404) {\r\n          // 해당 날짜에 일기가 없는 경우\r\n          this.diaryContent = null;\r\n        } else {\r\n          console.error('Error fetching diary:', error);\r\n        }\r\n      });\r\n    },\r\n\r\n    saveDiary() {\r\n      const userId = localStorage.getItem('userId');\r\n      axios.post('http://localhost:3000/savediary', {\r\n        user_id: userId,\r\n        date: this.selectedDate,\r\n        content: this.newDiaryContent\r\n      })\r\n      .then(() => {\r\n        this.diaryContent = this.newDiaryContent;\r\n        this.newDiaryContent = '';\r\n        alert('일기가 저장되었습니다.');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error saving diary:', error);\r\n      });\r\n    }\r\n  },\r\n  created() {\r\n      this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\r\n      this.fetchDiary(); // 컴포넌트 생성 시 일기장 조회\r\n  }\r\n};\r\n</script>\r\n  \r\n<style>\r\n  .main-page {\r\n    padding: 20px;\r\n    max-width: 800px;\r\n    margin: auto;\r\n  }\r\n\r\n  .user-info {\r\n    text-align: right;\r\n    font-size: 1.2em;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .main-container {\r\n    max-width: 500px;\r\n    margin: auto;\r\n    padding: 20px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .main-container input {\r\n    margin-bottom: 5px;\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}